// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from resources

package c5db.client.generated;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public final class SnapshotDescription implements Externalizable, Message<SnapshotDescription>, Schema<SnapshotDescription>
{
    public enum Type implements com.dyuproject.protostuff.EnumLite<Type>
    {
        DISABLED(0),
        FLUSH(1);

        public final int number;

        private Type (int number)
        {
            this.number = number;
        }

        public int getNumber()
        {
            return number;
        }

        public static Type valueOf(int number)
        {
            switch(number)
            {
                case 0: return DISABLED;
                case 1: return FLUSH;
                default: return null;
            }
        }
    }


    public static Schema<SnapshotDescription> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static SnapshotDescription getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final SnapshotDescription DEFAULT_INSTANCE = new SnapshotDescription();

    static final Long DEFAULT_CREATION_TIME = new Long(0l);

    private String name;
    private String table;
    private Long creationTime = DEFAULT_CREATION_TIME;
    private Type type;
    private Integer version;

    public SnapshotDescription()
    {

    }

    public SnapshotDescription(
        String name
    )
    {
        this.name = name;
    }

    @Override
    public String toString() {
        return "SnapshotDescription{" +
                    "name=" + name +
                    ", table=" + table +
                    ", creationTime=" + creationTime +
                    ", type=" + type +
                    ", version=" + version +
                '}';
    }
    // getters and setters

    // name

    public String getName()
    {
        return name;
    }


    public SnapshotDescription setName(String name)
    {
        this.name = name;
        return this;
    }

    // table

    public String getTable()
    {
        return table;
    }


    public SnapshotDescription setTable(String table)
    {
        this.table = table;
        return this;
    }

    // creationTime

    public Long getCreationTime()
    {
        return creationTime;
    }


    public SnapshotDescription setCreationTime(Long creationTime)
    {
        this.creationTime = creationTime;
        return this;
    }

    // type

    public Type getType()
    {
        return type == null ? Type.FLUSH : type;
    }


    public SnapshotDescription setType(Type type)
    {
        this.type = type;
        return this;
    }

    // version

    public Integer getVersion()
    {
        return version;
    }


    public SnapshotDescription setVersion(Integer version)
    {
        this.version = version;
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<SnapshotDescription> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public SnapshotDescription newMessage()
    {
        return new SnapshotDescription();
    }

    public Class<SnapshotDescription> typeClass()
    {
        return SnapshotDescription.class;
    }

    public String messageName()
    {
        return SnapshotDescription.class.getSimpleName();
    }

    public String messageFullName()
    {
        return SnapshotDescription.class.getName();
    }

    public boolean isInitialized(SnapshotDescription message)
    {
        return
            message.name != null;
    }

    public void mergeFrom(Input input, SnapshotDescription message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.name = input.readString();
                    break;
                case 2:
                    message.table = input.readString();
                    break;
                case 3:
                    message.creationTime = input.readInt64();
                    break;
                case 4:
                    message.type = Type.valueOf(input.readEnum());
                    break;

                case 5:
                    message.version = input.readInt32();
                    break;
                default:
                    input.handleUnknownField(number, this);
            }
        }
    }


    public void writeTo(Output output, SnapshotDescription message) throws IOException
    {
        if(message.name == null)
            throw new UninitializedMessageException(message);
        output.writeString(1, message.name, false);

        if(message.table != null)
            output.writeString(2, message.table, false);

        if(message.creationTime != null && message.creationTime != DEFAULT_CREATION_TIME)
            output.writeInt64(3, message.creationTime, false);

        if(message.type != null)
             output.writeEnum(4, message.type.number, false);

        if(message.version != null)
            output.writeInt32(5, message.version, false);
    }

    public String getFieldName(int number)
    {
        switch(number)
        {
            case 1: return "name";
            case 2: return "table";
            case 3: return "creationTime";
            case 4: return "type";
            case 5: return "version";
            default: return null;
        }
    }

    public int getFieldNumber(String name)
    {
        final Integer number = __fieldMap.get(name);
        return number == null ? 0 : number.intValue();
    }

    private static final java.util.HashMap<String,Integer> __fieldMap = new java.util.HashMap<String,Integer>();
    static
    {
        __fieldMap.put("name", 1);
        __fieldMap.put("table", 2);
        __fieldMap.put("creationTime", 3);
        __fieldMap.put("type", 4);
        __fieldMap.put("version", 5);
    }

}
