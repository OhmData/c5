// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from resources

package c5db.client.generated;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.ByteString;import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public final class Condition implements Externalizable, Message<Condition>, Schema<Condition>
{

    public static Schema<Condition> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static Condition getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final Condition DEFAULT_INSTANCE = new Condition();


    private ByteString row;
    private ByteString family;
    private ByteString qualifier;
    private CompareType compareType;
    private Comparator comparator;

    public Condition()
    {

    }

    public Condition(
        ByteString row,
        ByteString family,
        ByteString qualifier,
        CompareType compareType,
        Comparator comparator
    )
    {
        this.row = row;
        this.family = family;
        this.qualifier = qualifier;
        this.compareType = compareType;
        this.comparator = comparator;
    }

    @Override
    public String toString() {
        return "Condition{" +
                    "row=" + row +
                    ", family=" + family +
                    ", qualifier=" + qualifier +
                    ", compareType=" + compareType +
                    ", comparator=" + comparator +
                '}';
    }
    // getters and setters

    // row

    public ByteString getRow()
    {
        return row;
    }


    public Condition setRow(ByteString row)
    {
        this.row = row;
        return this;
    }

    // family

    public ByteString getFamily()
    {
        return family;
    }


    public Condition setFamily(ByteString family)
    {
        this.family = family;
        return this;
    }

    // qualifier

    public ByteString getQualifier()
    {
        return qualifier;
    }


    public Condition setQualifier(ByteString qualifier)
    {
        this.qualifier = qualifier;
        return this;
    }

    // compareType

    public CompareType getCompareType()
    {
        return compareType;
    }


    public Condition setCompareType(CompareType compareType)
    {
        this.compareType = compareType;
        return this;
    }

    // comparator

    public Comparator getComparator()
    {
        return comparator;
    }


    public Condition setComparator(Comparator comparator)
    {
        this.comparator = comparator;
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<Condition> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public Condition newMessage()
    {
        return new Condition();
    }

    public Class<Condition> typeClass()
    {
        return Condition.class;
    }

    public String messageName()
    {
        return Condition.class.getSimpleName();
    }

    public String messageFullName()
    {
        return Condition.class.getName();
    }

    public boolean isInitialized(Condition message)
    {
        return
            message.row != null 
            && message.family != null 
            && message.qualifier != null 
            && message.compareType != null 
            && message.comparator != null;
    }

    public void mergeFrom(Input input, Condition message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.row = input.readBytes();
                    break;
                case 2:
                    message.family = input.readBytes();
                    break;
                case 3:
                    message.qualifier = input.readBytes();
                    break;
                case 4:
                    message.compareType = CompareType.valueOf(input.readEnum());
                    break;

                case 5:
                    message.comparator = input.mergeObject(message.comparator, Comparator.getSchema());
                    break;

                default:
                    input.handleUnknownField(number, this);
            }
        }
    }


    public void writeTo(Output output, Condition message) throws IOException
    {
        if(message.row == null)
            throw new UninitializedMessageException(message);
        output.writeBytes(1, message.row, false);

        if(message.family == null)
            throw new UninitializedMessageException(message);
        output.writeBytes(2, message.family, false);

        if(message.qualifier == null)
            throw new UninitializedMessageException(message);
        output.writeBytes(3, message.qualifier, false);

        if(message.compareType == null)
            throw new UninitializedMessageException(message);
        output.writeEnum(4, message.compareType.number, false);

        if(message.comparator == null)
            throw new UninitializedMessageException(message);
        output.writeObject(5, message.comparator, Comparator.getSchema(), false);

    }

    public String getFieldName(int number)
    {
        switch(number)
        {
            case 1: return "row";
            case 2: return "family";
            case 3: return "qualifier";
            case 4: return "compareType";
            case 5: return "comparator";
            default: return null;
        }
    }

    public int getFieldNumber(String name)
    {
        final Integer number = __fieldMap.get(name);
        return number == null ? 0 : number.intValue();
    }

    private static final java.util.HashMap<String,Integer> __fieldMap = new java.util.HashMap<String,Integer>();
    static
    {
        __fieldMap.put("row", 1);
        __fieldMap.put("family", 2);
        __fieldMap.put("qualifier", 3);
        __fieldMap.put("compareType", 4);
        __fieldMap.put("comparator", 5);
    }

}
