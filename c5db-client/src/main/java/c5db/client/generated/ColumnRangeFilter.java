// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from resources

package c5db.client.generated;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.ByteString;import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class ColumnRangeFilter implements Externalizable, Message<ColumnRangeFilter>, Schema<ColumnRangeFilter>
{

    public static Schema<ColumnRangeFilter> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static ColumnRangeFilter getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final ColumnRangeFilter DEFAULT_INSTANCE = new ColumnRangeFilter();


    private ByteString minColumn;
    private Boolean minColumnInclusive;
    private ByteString maxColumn;
    private Boolean maxColumnInclusive;

    public ColumnRangeFilter()
    {

    }

    @Override
    public String toString() {
        return "ColumnRangeFilter{" +
                    "minColumn=" + minColumn +
                    ", minColumnInclusive=" + minColumnInclusive +
                    ", maxColumn=" + maxColumn +
                    ", maxColumnInclusive=" + maxColumnInclusive +
                '}';
    }
    // getters and setters

    // minColumn

    public ByteString getMinColumn()
    {
        return minColumn;
    }


    public ColumnRangeFilter setMinColumn(ByteString minColumn)
    {
        this.minColumn = minColumn;
        return this;
    }

    // minColumnInclusive

    public Boolean getMinColumnInclusive()
    {
        return minColumnInclusive;
    }


    public ColumnRangeFilter setMinColumnInclusive(Boolean minColumnInclusive)
    {
        this.minColumnInclusive = minColumnInclusive;
        return this;
    }

    // maxColumn

    public ByteString getMaxColumn()
    {
        return maxColumn;
    }


    public ColumnRangeFilter setMaxColumn(ByteString maxColumn)
    {
        this.maxColumn = maxColumn;
        return this;
    }

    // maxColumnInclusive

    public Boolean getMaxColumnInclusive()
    {
        return maxColumnInclusive;
    }


    public ColumnRangeFilter setMaxColumnInclusive(Boolean maxColumnInclusive)
    {
        this.maxColumnInclusive = maxColumnInclusive;
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<ColumnRangeFilter> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public ColumnRangeFilter newMessage()
    {
        return new ColumnRangeFilter();
    }

    public Class<ColumnRangeFilter> typeClass()
    {
        return ColumnRangeFilter.class;
    }

    public String messageName()
    {
        return ColumnRangeFilter.class.getSimpleName();
    }

    public String messageFullName()
    {
        return ColumnRangeFilter.class.getName();
    }

    public boolean isInitialized(ColumnRangeFilter message)
    {
        return true;
    }

    public void mergeFrom(Input input, ColumnRangeFilter message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.minColumn = input.readBytes();
                    break;
                case 2:
                    message.minColumnInclusive = input.readBool();
                    break;
                case 3:
                    message.maxColumn = input.readBytes();
                    break;
                case 4:
                    message.maxColumnInclusive = input.readBool();
                    break;
                default:
                    input.handleUnknownField(number, this);
            }
        }
    }


    public void writeTo(Output output, ColumnRangeFilter message) throws IOException
    {
        if(message.minColumn != null)
            output.writeBytes(1, message.minColumn, false);

        if(message.minColumnInclusive != null)
            output.writeBool(2, message.minColumnInclusive, false);

        if(message.maxColumn != null)
            output.writeBytes(3, message.maxColumn, false);

        if(message.maxColumnInclusive != null)
            output.writeBool(4, message.maxColumnInclusive, false);
    }

    public String getFieldName(int number)
    {
        switch(number)
        {
            case 1: return "minColumn";
            case 2: return "minColumnInclusive";
            case 3: return "maxColumn";
            case 4: return "maxColumnInclusive";
            default: return null;
        }
    }

    public int getFieldNumber(String name)
    {
        final Integer number = __fieldMap.get(name);
        return number == null ? 0 : number.intValue();
    }

    private static final java.util.HashMap<String,Integer> __fieldMap = new java.util.HashMap<String,Integer>();
    static
    {
        __fieldMap.put("minColumn", 1);
        __fieldMap.put("minColumnInclusive", 2);
        __fieldMap.put("maxColumn", 3);
        __fieldMap.put("maxColumnInclusive", 4);
    }

}
