// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from resources

package c5db.client.generated;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public final class GetRequest implements Externalizable, Message<GetRequest>, Schema<GetRequest>
{

    public static Schema<GetRequest> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static GetRequest getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final GetRequest DEFAULT_INSTANCE = new GetRequest();


    private RegionSpecifier region;
    private Get get;

    public GetRequest()
    {

    }

    public GetRequest(
        RegionSpecifier region,
        Get get
    )
    {
        this.region = region;
        this.get = get;
    }

    @Override
    public String toString() {
        return "GetRequest{" +
                    "region=" + region +
                    ", get=" + get +
                '}';
    }
    // getters and setters

    // region

    public RegionSpecifier getRegion()
    {
        return region;
    }


    public GetRequest setRegion(RegionSpecifier region)
    {
        this.region = region;
        return this;
    }

    // get

    public Get getGet()
    {
        return get;
    }


    public GetRequest setGet(Get get)
    {
        this.get = get;
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<GetRequest> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public GetRequest newMessage()
    {
        return new GetRequest();
    }

    public Class<GetRequest> typeClass()
    {
        return GetRequest.class;
    }

    public String messageName()
    {
        return GetRequest.class.getSimpleName();
    }

    public String messageFullName()
    {
        return GetRequest.class.getName();
    }

    public boolean isInitialized(GetRequest message)
    {
        return
            message.region != null 
            && message.get != null;
    }

    public void mergeFrom(Input input, GetRequest message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.region = input.mergeObject(message.region, RegionSpecifier.getSchema());
                    break;

                case 2:
                    message.get = input.mergeObject(message.get, Get.getSchema());
                    break;

                default:
                    input.handleUnknownField(number, this);
            }
        }
    }


    public void writeTo(Output output, GetRequest message) throws IOException
    {
        if(message.region == null)
            throw new UninitializedMessageException(message);
        output.writeObject(1, message.region, RegionSpecifier.getSchema(), false);


        if(message.get == null)
            throw new UninitializedMessageException(message);
        output.writeObject(2, message.get, Get.getSchema(), false);

    }

    public String getFieldName(int number)
    {
        switch(number)
        {
            case 1: return "region";
            case 2: return "get";
            default: return null;
        }
    }

    public int getFieldNumber(String name)
    {
        final Integer number = __fieldMap.get(name);
        return number == null ? 0 : number.intValue();
    }

    private static final java.util.HashMap<String,Integer> __fieldMap = new java.util.HashMap<String,Integer>();
    static
    {
        __fieldMap.put("region", 1);
        __fieldMap.put("get", 2);
    }

}
