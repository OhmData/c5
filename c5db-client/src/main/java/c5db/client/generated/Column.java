// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from resources

package c5db.client.generated;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import com.dyuproject.protostuff.ByteString;import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public final class Column implements Externalizable, Message<Column>, Schema<Column>
{

    public static Schema<Column> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static Column getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final Column DEFAULT_INSTANCE = new Column();


    private ByteString family;
    private List<ByteString> qualifier;

    public Column()
    {

    }

    public Column(
        ByteString family
    )
    {
        this.family = family;
    }

    @Override
    public String toString() {
        return "Column{" +
                    "family=" + family +
                    ", qualifier=" + qualifier +
                '}';
    }
    // getters and setters

    // family

    public ByteString getFamily()
    {
        return family;
    }


    public Column setFamily(ByteString family)
    {
        this.family = family;
        return this;
    }

    // qualifier

    public List<ByteString> getQualifierList()
    {
        return qualifier;
    }


    public Column setQualifierList(List<ByteString> qualifier)
    {
        this.qualifier = qualifier;
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<Column> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public Column newMessage()
    {
        return new Column();
    }

    public Class<Column> typeClass()
    {
        return Column.class;
    }

    public String messageName()
    {
        return Column.class.getSimpleName();
    }

    public String messageFullName()
    {
        return Column.class.getName();
    }

    public boolean isInitialized(Column message)
    {
        return
            message.family != null;
    }

    public void mergeFrom(Input input, Column message) throws IOException
    {
        try {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.family = input.readBytes();
                    break;
                case 2:
                    if(message.qualifier == null)
                        message.qualifier = new ArrayList<ByteString>();
                    message.qualifier.add(input.readBytes());break;
                default:
                    input.handleUnknownField(number, this);
            }
        }
        } finally {
        if (message.qualifier != null)
            message.qualifier = java.util.Collections.unmodifiableList(message.qualifier);
        else
            message.qualifier = java.util.Collections.emptyList();
        }
    }


    public void writeTo(Output output, Column message) throws IOException
    {
        if(message.family == null)
            throw new UninitializedMessageException(message);
        output.writeBytes(1, message.family, false);

        if(message.qualifier != null)
        {
            for(ByteString qualifier : message.qualifier)
            {
                if(qualifier != null)
                    output.writeBytes(2, qualifier, true);
            }
        }
    }

    public String getFieldName(int number)
    {
        switch(number)
        {
            case 1: return "family";
            case 2: return "qualifier";
            default: return null;
        }
    }

    public int getFieldNumber(String name)
    {
        final Integer number = __fieldMap.get(name);
        return number == null ? 0 : number.intValue();
    }

    private static final java.util.HashMap<String,Integer> __fieldMap = new java.util.HashMap<String,Integer>();
    static
    {
        __fieldMap.put("family", 1);
        __fieldMap.put("qualifier", 2);
    }

}
