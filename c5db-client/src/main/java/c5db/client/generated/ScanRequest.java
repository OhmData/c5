// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from resources

package c5db.client.generated;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class ScanRequest implements Externalizable, Message<ScanRequest>, Schema<ScanRequest>
{

    public static Schema<ScanRequest> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static ScanRequest getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final ScanRequest DEFAULT_INSTANCE = new ScanRequest();


    private RegionSpecifier region;
    private Scan scan;
    private Long scannerId;
    private Integer numberOfRows;
    private Boolean closeScanner;
    private Long nextCallSeq;

    public ScanRequest()
    {

    }

    @Override
    public String toString() {
        return "ScanRequest{" +
                    "region=" + region +
                    ", scan=" + scan +
                    ", scannerId=" + scannerId +
                    ", numberOfRows=" + numberOfRows +
                    ", closeScanner=" + closeScanner +
                    ", nextCallSeq=" + nextCallSeq +
                '}';
    }
    // getters and setters

    // region

    public RegionSpecifier getRegion()
    {
        return region;
    }


    public ScanRequest setRegion(RegionSpecifier region)
    {
        this.region = region;
        return this;
    }

    // scan

    public Scan getScan()
    {
        return scan;
    }


    public ScanRequest setScan(Scan scan)
    {
        this.scan = scan;
        return this;
    }

    // scannerId

    public Long getScannerId()
    {
        return scannerId;
    }


    public ScanRequest setScannerId(Long scannerId)
    {
        this.scannerId = scannerId;
        return this;
    }

    // numberOfRows

    public Integer getNumberOfRows()
    {
        return numberOfRows;
    }


    public ScanRequest setNumberOfRows(Integer numberOfRows)
    {
        this.numberOfRows = numberOfRows;
        return this;
    }

    // closeScanner

    public Boolean getCloseScanner()
    {
        return closeScanner;
    }


    public ScanRequest setCloseScanner(Boolean closeScanner)
    {
        this.closeScanner = closeScanner;
        return this;
    }

    // nextCallSeq

    public Long getNextCallSeq()
    {
        return nextCallSeq;
    }


    public ScanRequest setNextCallSeq(Long nextCallSeq)
    {
        this.nextCallSeq = nextCallSeq;
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<ScanRequest> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public ScanRequest newMessage()
    {
        return new ScanRequest();
    }

    public Class<ScanRequest> typeClass()
    {
        return ScanRequest.class;
    }

    public String messageName()
    {
        return ScanRequest.class.getSimpleName();
    }

    public String messageFullName()
    {
        return ScanRequest.class.getName();
    }

    public boolean isInitialized(ScanRequest message)
    {
        return true;
    }

    public void mergeFrom(Input input, ScanRequest message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.region = input.mergeObject(message.region, RegionSpecifier.getSchema());
                    break;

                case 2:
                    message.scan = input.mergeObject(message.scan, Scan.getSchema());
                    break;

                case 3:
                    message.scannerId = input.readUInt64();
                    break;
                case 4:
                    message.numberOfRows = input.readUInt32();
                    break;
                case 5:
                    message.closeScanner = input.readBool();
                    break;
                case 6:
                    message.nextCallSeq = input.readUInt64();
                    break;
                default:
                    input.handleUnknownField(number, this);
            }
        }
    }


    public void writeTo(Output output, ScanRequest message) throws IOException
    {
        if(message.region != null)
             output.writeObject(1, message.region, RegionSpecifier.getSchema(), false);


        if(message.scan != null)
             output.writeObject(2, message.scan, Scan.getSchema(), false);


        if(message.scannerId != null)
            output.writeUInt64(3, message.scannerId, false);

        if(message.numberOfRows != null)
            output.writeUInt32(4, message.numberOfRows, false);

        if(message.closeScanner != null)
            output.writeBool(5, message.closeScanner, false);

        if(message.nextCallSeq != null)
            output.writeUInt64(6, message.nextCallSeq, false);
    }

    public String getFieldName(int number)
    {
        switch(number)
        {
            case 1: return "region";
            case 2: return "scan";
            case 3: return "scannerId";
            case 4: return "numberOfRows";
            case 5: return "closeScanner";
            case 6: return "nextCallSeq";
            default: return null;
        }
    }

    public int getFieldNumber(String name)
    {
        final Integer number = __fieldMap.get(name);
        return number == null ? 0 : number.intValue();
    }

    private static final java.util.HashMap<String,Integer> __fieldMap = new java.util.HashMap<String,Integer>();
    static
    {
        __fieldMap.put("region", 1);
        __fieldMap.put("scan", 2);
        __fieldMap.put("scannerId", 3);
        __fieldMap.put("numberOfRows", 4);
        __fieldMap.put("closeScanner", 5);
        __fieldMap.put("nextCallSeq", 6);
    }

}
