// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from resources

package c5db.client.generated;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class NameInt64Pair implements Externalizable, Message<NameInt64Pair>, Schema<NameInt64Pair>
{

    public static Schema<NameInt64Pair> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static NameInt64Pair getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final NameInt64Pair DEFAULT_INSTANCE = new NameInt64Pair();


    private String name;
    private Long value;

    public NameInt64Pair()
    {

    }

    @Override
    public String toString() {
        return "NameInt64Pair{" +
                    "name=" + name +
                    ", value=" + value +
                '}';
    }
    // getters and setters

    // name

    public String getName()
    {
        return name;
    }


    public NameInt64Pair setName(String name)
    {
        this.name = name;
        return this;
    }

    // value

    public Long getValue()
    {
        return value;
    }


    public NameInt64Pair setValue(Long value)
    {
        this.value = value;
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<NameInt64Pair> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public NameInt64Pair newMessage()
    {
        return new NameInt64Pair();
    }

    public Class<NameInt64Pair> typeClass()
    {
        return NameInt64Pair.class;
    }

    public String messageName()
    {
        return NameInt64Pair.class.getSimpleName();
    }

    public String messageFullName()
    {
        return NameInt64Pair.class.getName();
    }

    public boolean isInitialized(NameInt64Pair message)
    {
        return true;
    }

    public void mergeFrom(Input input, NameInt64Pair message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.name = input.readString();
                    break;
                case 2:
                    message.value = input.readInt64();
                    break;
                default:
                    input.handleUnknownField(number, this);
            }
        }
    }


    public void writeTo(Output output, NameInt64Pair message) throws IOException
    {
        if(message.name != null)
            output.writeString(1, message.name, false);

        if(message.value != null)
            output.writeInt64(2, message.value, false);
    }

    public String getFieldName(int number)
    {
        switch(number)
        {
            case 1: return "name";
            case 2: return "value";
            default: return null;
        }
    }

    public int getFieldNumber(String name)
    {
        final Integer number = __fieldMap.get(name);
        return number == null ? 0 : number.intValue();
    }

    private static final java.util.HashMap<String,Integer> __fieldMap = new java.util.HashMap<String,Integer>();
    static
    {
        __fieldMap.put("name", 1);
        __fieldMap.put("value", 2);
    }

}
