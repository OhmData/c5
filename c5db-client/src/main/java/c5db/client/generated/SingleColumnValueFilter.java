// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from resources

package c5db.client.generated;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.ByteString;import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public final class SingleColumnValueFilter implements Externalizable, Message<SingleColumnValueFilter>, Schema<SingleColumnValueFilter>
{

    public static Schema<SingleColumnValueFilter> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static SingleColumnValueFilter getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final SingleColumnValueFilter DEFAULT_INSTANCE = new SingleColumnValueFilter();


    private ByteString columnFamily;
    private ByteString columnQualifier;
    private CompareType compareOp;
    private Comparator comparator;
    private Boolean filterIfMissing;
    private Boolean latestVersionOnly;

    public SingleColumnValueFilter()
    {

    }

    public SingleColumnValueFilter(
        CompareType compareOp,
        Comparator comparator
    )
    {
        this.compareOp = compareOp;
        this.comparator = comparator;
    }

    @Override
    public String toString() {
        return "SingleColumnValueFilter{" +
                    "columnFamily=" + columnFamily +
                    ", columnQualifier=" + columnQualifier +
                    ", compareOp=" + compareOp +
                    ", comparator=" + comparator +
                    ", filterIfMissing=" + filterIfMissing +
                    ", latestVersionOnly=" + latestVersionOnly +
                '}';
    }
    // getters and setters

    // columnFamily

    public ByteString getColumnFamily()
    {
        return columnFamily;
    }


    public SingleColumnValueFilter setColumnFamily(ByteString columnFamily)
    {
        this.columnFamily = columnFamily;
        return this;
    }

    // columnQualifier

    public ByteString getColumnQualifier()
    {
        return columnQualifier;
    }


    public SingleColumnValueFilter setColumnQualifier(ByteString columnQualifier)
    {
        this.columnQualifier = columnQualifier;
        return this;
    }

    // compareOp

    public CompareType getCompareOp()
    {
        return compareOp;
    }


    public SingleColumnValueFilter setCompareOp(CompareType compareOp)
    {
        this.compareOp = compareOp;
        return this;
    }

    // comparator

    public Comparator getComparator()
    {
        return comparator;
    }


    public SingleColumnValueFilter setComparator(Comparator comparator)
    {
        this.comparator = comparator;
        return this;
    }

    // filterIfMissing

    public Boolean getFilterIfMissing()
    {
        return filterIfMissing;
    }


    public SingleColumnValueFilter setFilterIfMissing(Boolean filterIfMissing)
    {
        this.filterIfMissing = filterIfMissing;
        return this;
    }

    // latestVersionOnly

    public Boolean getLatestVersionOnly()
    {
        return latestVersionOnly;
    }


    public SingleColumnValueFilter setLatestVersionOnly(Boolean latestVersionOnly)
    {
        this.latestVersionOnly = latestVersionOnly;
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<SingleColumnValueFilter> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public SingleColumnValueFilter newMessage()
    {
        return new SingleColumnValueFilter();
    }

    public Class<SingleColumnValueFilter> typeClass()
    {
        return SingleColumnValueFilter.class;
    }

    public String messageName()
    {
        return SingleColumnValueFilter.class.getSimpleName();
    }

    public String messageFullName()
    {
        return SingleColumnValueFilter.class.getName();
    }

    public boolean isInitialized(SingleColumnValueFilter message)
    {
        return
            message.compareOp != null 
            && message.comparator != null;
    }

    public void mergeFrom(Input input, SingleColumnValueFilter message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.columnFamily = input.readBytes();
                    break;
                case 2:
                    message.columnQualifier = input.readBytes();
                    break;
                case 3:
                    message.compareOp = CompareType.valueOf(input.readEnum());
                    break;

                case 4:
                    message.comparator = input.mergeObject(message.comparator, Comparator.getSchema());
                    break;

                case 5:
                    message.filterIfMissing = input.readBool();
                    break;
                case 6:
                    message.latestVersionOnly = input.readBool();
                    break;
                default:
                    input.handleUnknownField(number, this);
            }
        }
    }


    public void writeTo(Output output, SingleColumnValueFilter message) throws IOException
    {
        if(message.columnFamily != null)
            output.writeBytes(1, message.columnFamily, false);

        if(message.columnQualifier != null)
            output.writeBytes(2, message.columnQualifier, false);

        if(message.compareOp == null)
            throw new UninitializedMessageException(message);
        output.writeEnum(3, message.compareOp.number, false);

        if(message.comparator == null)
            throw new UninitializedMessageException(message);
        output.writeObject(4, message.comparator, Comparator.getSchema(), false);


        if(message.filterIfMissing != null)
            output.writeBool(5, message.filterIfMissing, false);

        if(message.latestVersionOnly != null)
            output.writeBool(6, message.latestVersionOnly, false);
    }

    public String getFieldName(int number)
    {
        switch(number)
        {
            case 1: return "columnFamily";
            case 2: return "columnQualifier";
            case 3: return "compareOp";
            case 4: return "comparator";
            case 5: return "filterIfMissing";
            case 6: return "latestVersionOnly";
            default: return null;
        }
    }

    public int getFieldNumber(String name)
    {
        final Integer number = __fieldMap.get(name);
        return number == null ? 0 : number.intValue();
    }

    private static final java.util.HashMap<String,Integer> __fieldMap = new java.util.HashMap<String,Integer>();
    static
    {
        __fieldMap.put("columnFamily", 1);
        __fieldMap.put("columnQualifier", 2);
        __fieldMap.put("compareOp", 3);
        __fieldMap.put("comparator", 4);
        __fieldMap.put("filterIfMissing", 5);
        __fieldMap.put("latestVersionOnly", 6);
    }

}
