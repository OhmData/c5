// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from resources

package c5db.client.generated;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.ByteString;import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public final class DependentColumnFilter implements Externalizable, Message<DependentColumnFilter>, Schema<DependentColumnFilter>
{

    public static Schema<DependentColumnFilter> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static DependentColumnFilter getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final DependentColumnFilter DEFAULT_INSTANCE = new DependentColumnFilter();


    private CompareFilter compareFilter;
    private ByteString columnFamily;
    private ByteString columnQualifier;
    private Boolean dropDependentColumn;

    public DependentColumnFilter()
    {

    }

    public DependentColumnFilter(
        CompareFilter compareFilter
    )
    {
        this.compareFilter = compareFilter;
    }

    @Override
    public String toString() {
        return "DependentColumnFilter{" +
                    "compareFilter=" + compareFilter +
                    ", columnFamily=" + columnFamily +
                    ", columnQualifier=" + columnQualifier +
                    ", dropDependentColumn=" + dropDependentColumn +
                '}';
    }
    // getters and setters

    // compareFilter

    public CompareFilter getCompareFilter()
    {
        return compareFilter;
    }


    public DependentColumnFilter setCompareFilter(CompareFilter compareFilter)
    {
        this.compareFilter = compareFilter;
        return this;
    }

    // columnFamily

    public ByteString getColumnFamily()
    {
        return columnFamily;
    }


    public DependentColumnFilter setColumnFamily(ByteString columnFamily)
    {
        this.columnFamily = columnFamily;
        return this;
    }

    // columnQualifier

    public ByteString getColumnQualifier()
    {
        return columnQualifier;
    }


    public DependentColumnFilter setColumnQualifier(ByteString columnQualifier)
    {
        this.columnQualifier = columnQualifier;
        return this;
    }

    // dropDependentColumn

    public Boolean getDropDependentColumn()
    {
        return dropDependentColumn;
    }


    public DependentColumnFilter setDropDependentColumn(Boolean dropDependentColumn)
    {
        this.dropDependentColumn = dropDependentColumn;
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<DependentColumnFilter> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public DependentColumnFilter newMessage()
    {
        return new DependentColumnFilter();
    }

    public Class<DependentColumnFilter> typeClass()
    {
        return DependentColumnFilter.class;
    }

    public String messageName()
    {
        return DependentColumnFilter.class.getSimpleName();
    }

    public String messageFullName()
    {
        return DependentColumnFilter.class.getName();
    }

    public boolean isInitialized(DependentColumnFilter message)
    {
        return
            message.compareFilter != null;
    }

    public void mergeFrom(Input input, DependentColumnFilter message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.compareFilter = input.mergeObject(message.compareFilter, CompareFilter.getSchema());
                    break;

                case 2:
                    message.columnFamily = input.readBytes();
                    break;
                case 3:
                    message.columnQualifier = input.readBytes();
                    break;
                case 4:
                    message.dropDependentColumn = input.readBool();
                    break;
                default:
                    input.handleUnknownField(number, this);
            }
        }
    }


    public void writeTo(Output output, DependentColumnFilter message) throws IOException
    {
        if(message.compareFilter == null)
            throw new UninitializedMessageException(message);
        output.writeObject(1, message.compareFilter, CompareFilter.getSchema(), false);


        if(message.columnFamily != null)
            output.writeBytes(2, message.columnFamily, false);

        if(message.columnQualifier != null)
            output.writeBytes(3, message.columnQualifier, false);

        if(message.dropDependentColumn != null)
            output.writeBool(4, message.dropDependentColumn, false);
    }

    public String getFieldName(int number)
    {
        switch(number)
        {
            case 1: return "compareFilter";
            case 2: return "columnFamily";
            case 3: return "columnQualifier";
            case 4: return "dropDependentColumn";
            default: return null;
        }
    }

    public int getFieldNumber(String name)
    {
        final Integer number = __fieldMap.get(name);
        return number == null ? 0 : number.intValue();
    }

    private static final java.util.HashMap<String,Integer> __fieldMap = new java.util.HashMap<String,Integer>();
    static
    {
        __fieldMap.put("compareFilter", 1);
        __fieldMap.put("columnFamily", 2);
        __fieldMap.put("columnQualifier", 3);
        __fieldMap.put("dropDependentColumn", 4);
    }

}
