// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from resources

package c5db.client.generated;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public final class FilterList implements Externalizable, Message<FilterList>, Schema<FilterList>
{
    public enum Operator implements com.dyuproject.protostuff.EnumLite<Operator>
    {
        MUST_PASS_ALL(1),
        MUST_PASS_ONE(2);

        public final int number;

        private Operator (int number)
        {
            this.number = number;
        }

        public int getNumber()
        {
            return number;
        }

        public static Operator valueOf(int number)
        {
            switch(number)
            {
                case 1: return MUST_PASS_ALL;
                case 2: return MUST_PASS_ONE;
                default: return null;
            }
        }
    }


    public static Schema<FilterList> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static FilterList getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final FilterList DEFAULT_INSTANCE = new FilterList();


    private Operator operator;
    private List<Filter> filters;

    public FilterList()
    {

    }

    public FilterList(
        Operator operator
    )
    {
        this.operator = operator;
    }

    @Override
    public String toString() {
        return "FilterList{" +
                    "operator=" + operator +
                    ", filters=" + filters +
                '}';
    }
    // getters and setters

    // operator

    public Operator getOperator()
    {
        return operator;
    }


    public FilterList setOperator(Operator operator)
    {
        this.operator = operator;
        return this;
    }

    // filters

    public List<Filter> getFiltersList()
    {
        return filters;
    }


    public FilterList setFiltersList(List<Filter> filters)
    {
        this.filters = filters;
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<FilterList> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public FilterList newMessage()
    {
        return new FilterList();
    }

    public Class<FilterList> typeClass()
    {
        return FilterList.class;
    }

    public String messageName()
    {
        return FilterList.class.getSimpleName();
    }

    public String messageFullName()
    {
        return FilterList.class.getName();
    }

    public boolean isInitialized(FilterList message)
    {
        return
            message.operator != null;
    }

    public void mergeFrom(Input input, FilterList message) throws IOException
    {
        try {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.operator = Operator.valueOf(input.readEnum());
                    break;

                case 2:
                    if(message.filters == null)
                        message.filters = new ArrayList<Filter>();
                    message.filters.add(input.mergeObject(null, Filter.getSchema()));
                    break;

                default:
                    input.handleUnknownField(number, this);
            }
        }
        } finally {
        if (message.filters != null)
            message.filters = java.util.Collections.unmodifiableList(message.filters);
        else
            message.filters = java.util.Collections.emptyList();
        }
    }


    public void writeTo(Output output, FilterList message) throws IOException
    {
        if(message.operator == null)
            throw new UninitializedMessageException(message);
        output.writeEnum(1, message.operator.number, false);

        if(message.filters != null)
        {
            for(Filter filters : message.filters)
            {
                if(filters != null)
                    output.writeObject(2, filters, Filter.getSchema(), true);
            }
        }

    }

    public String getFieldName(int number)
    {
        switch(number)
        {
            case 1: return "operator";
            case 2: return "filters";
            default: return null;
        }
    }

    public int getFieldNumber(String name)
    {
        final Integer number = __fieldMap.get(name);
        return number == null ? 0 : number.intValue();
    }

    private static final java.util.HashMap<String,Integer> __fieldMap = new java.util.HashMap<String,Integer>();
    static
    {
        __fieldMap.put("operator", 1);
        __fieldMap.put("filters", 2);
    }

}
