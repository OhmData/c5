// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from resources

package c5db.client.generated;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class TableSchema implements Externalizable, Message<TableSchema>, Schema<TableSchema>
{

    public static Schema<TableSchema> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static TableSchema getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final TableSchema DEFAULT_INSTANCE = new TableSchema();


    private TableName tableName;
    private List<BytesBytesPair> attributes;
    private List<ColumnFamilySchema> columnFamilies;
    private List<NameStringPair> configuration;

    public TableSchema()
    {

    }

    @Override
    public String toString() {
        return "TableSchema{" +
                    "tableName=" + tableName +
                    ", attributes=" + attributes +
                    ", columnFamilies=" + columnFamilies +
                    ", configuration=" + configuration +
                '}';
    }
    // getters and setters

    // tableName

    public TableName getTableName()
    {
        return tableName;
    }


    public TableSchema setTableName(TableName tableName)
    {
        this.tableName = tableName;
        return this;
    }

    // attributes

    public List<BytesBytesPair> getAttributesList()
    {
        return attributes;
    }


    public TableSchema setAttributesList(List<BytesBytesPair> attributes)
    {
        this.attributes = attributes;
        return this;
    }

    // columnFamilies

    public List<ColumnFamilySchema> getColumnFamiliesList()
    {
        return columnFamilies;
    }


    public TableSchema setColumnFamiliesList(List<ColumnFamilySchema> columnFamilies)
    {
        this.columnFamilies = columnFamilies;
        return this;
    }

    // configuration

    public List<NameStringPair> getConfigurationList()
    {
        return configuration;
    }


    public TableSchema setConfigurationList(List<NameStringPair> configuration)
    {
        this.configuration = configuration;
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<TableSchema> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public TableSchema newMessage()
    {
        return new TableSchema();
    }

    public Class<TableSchema> typeClass()
    {
        return TableSchema.class;
    }

    public String messageName()
    {
        return TableSchema.class.getSimpleName();
    }

    public String messageFullName()
    {
        return TableSchema.class.getName();
    }

    public boolean isInitialized(TableSchema message)
    {
        return true;
    }

    public void mergeFrom(Input input, TableSchema message) throws IOException
    {
        try {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.tableName = input.mergeObject(message.tableName, TableName.getSchema());
                    break;

                case 2:
                    if(message.attributes == null)
                        message.attributes = new ArrayList<BytesBytesPair>();
                    message.attributes.add(input.mergeObject(null, BytesBytesPair.getSchema()));
                    break;

                case 3:
                    if(message.columnFamilies == null)
                        message.columnFamilies = new ArrayList<ColumnFamilySchema>();
                    message.columnFamilies.add(input.mergeObject(null, ColumnFamilySchema.getSchema()));
                    break;

                case 4:
                    if(message.configuration == null)
                        message.configuration = new ArrayList<NameStringPair>();
                    message.configuration.add(input.mergeObject(null, NameStringPair.getSchema()));
                    break;

                default:
                    input.handleUnknownField(number, this);
            }
        }
        } finally {
        if (message.attributes != null)
            message.attributes = java.util.Collections.unmodifiableList(message.attributes);
        else
            message.attributes = java.util.Collections.emptyList();
        if (message.columnFamilies != null)
            message.columnFamilies = java.util.Collections.unmodifiableList(message.columnFamilies);
        else
            message.columnFamilies = java.util.Collections.emptyList();
        if (message.configuration != null)
            message.configuration = java.util.Collections.unmodifiableList(message.configuration);
        else
            message.configuration = java.util.Collections.emptyList();
        }
    }


    public void writeTo(Output output, TableSchema message) throws IOException
    {
        if(message.tableName != null)
             output.writeObject(1, message.tableName, TableName.getSchema(), false);


        if(message.attributes != null)
        {
            for(BytesBytesPair attributes : message.attributes)
            {
                if(attributes != null)
                    output.writeObject(2, attributes, BytesBytesPair.getSchema(), true);
            }
        }


        if(message.columnFamilies != null)
        {
            for(ColumnFamilySchema columnFamilies : message.columnFamilies)
            {
                if(columnFamilies != null)
                    output.writeObject(3, columnFamilies, ColumnFamilySchema.getSchema(), true);
            }
        }


        if(message.configuration != null)
        {
            for(NameStringPair configuration : message.configuration)
            {
                if(configuration != null)
                    output.writeObject(4, configuration, NameStringPair.getSchema(), true);
            }
        }

    }

    public String getFieldName(int number)
    {
        switch(number)
        {
            case 1: return "tableName";
            case 2: return "attributes";
            case 3: return "columnFamilies";
            case 4: return "configuration";
            default: return null;
        }
    }

    public int getFieldNumber(String name)
    {
        final Integer number = __fieldMap.get(name);
        return number == null ? 0 : number.intValue();
    }

    private static final java.util.HashMap<String,Integer> __fieldMap = new java.util.HashMap<String,Integer>();
    static
    {
        __fieldMap.put("tableName", 1);
        __fieldMap.put("attributes", 2);
        __fieldMap.put("columnFamilies", 3);
        __fieldMap.put("configuration", 4);
    }

}
