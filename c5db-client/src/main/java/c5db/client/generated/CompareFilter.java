// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from resources

package c5db.client.generated;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public final class CompareFilter implements Externalizable, Message<CompareFilter>, Schema<CompareFilter>
{

    public static Schema<CompareFilter> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static CompareFilter getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final CompareFilter DEFAULT_INSTANCE = new CompareFilter();


    private CompareType compareOp;
    private Comparator comparator;

    public CompareFilter()
    {

    }

    public CompareFilter(
        CompareType compareOp
    )
    {
        this.compareOp = compareOp;
    }

    @Override
    public String toString() {
        return "CompareFilter{" +
                    "compareOp=" + compareOp +
                    ", comparator=" + comparator +
                '}';
    }
    // getters and setters

    // compareOp

    public CompareType getCompareOp()
    {
        return compareOp;
    }


    public CompareFilter setCompareOp(CompareType compareOp)
    {
        this.compareOp = compareOp;
        return this;
    }

    // comparator

    public Comparator getComparator()
    {
        return comparator;
    }


    public CompareFilter setComparator(Comparator comparator)
    {
        this.comparator = comparator;
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<CompareFilter> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public CompareFilter newMessage()
    {
        return new CompareFilter();
    }

    public Class<CompareFilter> typeClass()
    {
        return CompareFilter.class;
    }

    public String messageName()
    {
        return CompareFilter.class.getSimpleName();
    }

    public String messageFullName()
    {
        return CompareFilter.class.getName();
    }

    public boolean isInitialized(CompareFilter message)
    {
        return
            message.compareOp != null;
    }

    public void mergeFrom(Input input, CompareFilter message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.compareOp = CompareType.valueOf(input.readEnum());
                    break;

                case 2:
                    message.comparator = input.mergeObject(message.comparator, Comparator.getSchema());
                    break;

                default:
                    input.handleUnknownField(number, this);
            }
        }
    }


    public void writeTo(Output output, CompareFilter message) throws IOException
    {
        if(message.compareOp == null)
            throw new UninitializedMessageException(message);
        output.writeEnum(1, message.compareOp.number, false);

        if(message.comparator != null)
             output.writeObject(2, message.comparator, Comparator.getSchema(), false);

    }

    public String getFieldName(int number)
    {
        switch(number)
        {
            case 1: return "compareOp";
            case 2: return "comparator";
            default: return null;
        }
    }

    public int getFieldNumber(String name)
    {
        final Integer number = __fieldMap.get(name);
        return number == null ? 0 : number.intValue();
    }

    private static final java.util.HashMap<String,Integer> __fieldMap = new java.util.HashMap<String,Integer>();
    static
    {
        __fieldMap.put("compareOp", 1);
        __fieldMap.put("comparator", 2);
    }

}
