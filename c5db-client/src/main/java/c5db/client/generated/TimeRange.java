// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from resources

package c5db.client.generated;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class TimeRange implements Externalizable, Message<TimeRange>, Schema<TimeRange>
{

    public static Schema<TimeRange> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static TimeRange getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final TimeRange DEFAULT_INSTANCE = new TimeRange();


    private Long from;
    private Long to;

    public TimeRange()
    {

    }

    @Override
    public String toString() {
        return "TimeRange{" +
                    "from=" + from +
                    ", to=" + to +
                '}';
    }
    // getters and setters

    // from

    public Long getFrom()
    {
        return from;
    }


    public TimeRange setFrom(Long from)
    {
        this.from = from;
        return this;
    }

    // to

    public Long getTo()
    {
        return to;
    }


    public TimeRange setTo(Long to)
    {
        this.to = to;
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<TimeRange> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public TimeRange newMessage()
    {
        return new TimeRange();
    }

    public Class<TimeRange> typeClass()
    {
        return TimeRange.class;
    }

    public String messageName()
    {
        return TimeRange.class.getSimpleName();
    }

    public String messageFullName()
    {
        return TimeRange.class.getName();
    }

    public boolean isInitialized(TimeRange message)
    {
        return true;
    }

    public void mergeFrom(Input input, TimeRange message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.from = input.readUInt64();
                    break;
                case 2:
                    message.to = input.readUInt64();
                    break;
                default:
                    input.handleUnknownField(number, this);
            }
        }
    }


    public void writeTo(Output output, TimeRange message) throws IOException
    {
        if(message.from != null)
            output.writeUInt64(1, message.from, false);

        if(message.to != null)
            output.writeUInt64(2, message.to, false);
    }

    public String getFieldName(int number)
    {
        switch(number)
        {
            case 1: return "from";
            case 2: return "to";
            default: return null;
        }
    }

    public int getFieldNumber(String name)
    {
        final Integer number = __fieldMap.get(name);
        return number == null ? 0 : number.intValue();
    }

    private static final java.util.HashMap<String,Integer> __fieldMap = new java.util.HashMap<String,Integer>();
    static
    {
        __fieldMap.put("from", 1);
        __fieldMap.put("to", 2);
    }

}
