// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from resources

package c5db.client.generated;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.ByteString;import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public final class RegionInfo implements Externalizable, Message<RegionInfo>, Schema<RegionInfo>
{

    public static Schema<RegionInfo> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static RegionInfo getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final RegionInfo DEFAULT_INSTANCE = new RegionInfo();


    private Long regionId;
    private TableName tableName;
    private ByteString startKey;
    private ByteString endKey;
    private Boolean offline;
    private Boolean split;

    public RegionInfo()
    {

    }

    public RegionInfo(
        Long regionId,
        TableName tableName
    )
    {
        this.regionId = regionId;
        this.tableName = tableName;
    }

    @Override
    public String toString() {
        return "RegionInfo{" +
                    "regionId=" + regionId +
                    ", tableName=" + tableName +
                    ", startKey=" + startKey +
                    ", endKey=" + endKey +
                    ", offline=" + offline +
                    ", split=" + split +
                '}';
    }
    // getters and setters

    // regionId

    public Long getRegionId()
    {
        return regionId;
    }


    public RegionInfo setRegionId(Long regionId)
    {
        this.regionId = regionId;
        return this;
    }

    // tableName

    public TableName getTableName()
    {
        return tableName;
    }


    public RegionInfo setTableName(TableName tableName)
    {
        this.tableName = tableName;
        return this;
    }

    // startKey

    public ByteString getStartKey()
    {
        return startKey;
    }


    public RegionInfo setStartKey(ByteString startKey)
    {
        this.startKey = startKey;
        return this;
    }

    // endKey

    public ByteString getEndKey()
    {
        return endKey;
    }


    public RegionInfo setEndKey(ByteString endKey)
    {
        this.endKey = endKey;
        return this;
    }

    // offline

    public Boolean getOffline()
    {
        return offline;
    }


    public RegionInfo setOffline(Boolean offline)
    {
        this.offline = offline;
        return this;
    }

    // split

    public Boolean getSplit()
    {
        return split;
    }


    public RegionInfo setSplit(Boolean split)
    {
        this.split = split;
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<RegionInfo> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public RegionInfo newMessage()
    {
        return new RegionInfo();
    }

    public Class<RegionInfo> typeClass()
    {
        return RegionInfo.class;
    }

    public String messageName()
    {
        return RegionInfo.class.getSimpleName();
    }

    public String messageFullName()
    {
        return RegionInfo.class.getName();
    }

    public boolean isInitialized(RegionInfo message)
    {
        return
            message.regionId != null 
            && message.tableName != null;
    }

    public void mergeFrom(Input input, RegionInfo message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.regionId = input.readUInt64();
                    break;
                case 2:
                    message.tableName = input.mergeObject(message.tableName, TableName.getSchema());
                    break;

                case 3:
                    message.startKey = input.readBytes();
                    break;
                case 4:
                    message.endKey = input.readBytes();
                    break;
                case 5:
                    message.offline = input.readBool();
                    break;
                case 6:
                    message.split = input.readBool();
                    break;
                default:
                    input.handleUnknownField(number, this);
            }
        }
    }


    public void writeTo(Output output, RegionInfo message) throws IOException
    {
        if(message.regionId == null)
            throw new UninitializedMessageException(message);
        output.writeUInt64(1, message.regionId, false);

        if(message.tableName == null)
            throw new UninitializedMessageException(message);
        output.writeObject(2, message.tableName, TableName.getSchema(), false);


        if(message.startKey != null)
            output.writeBytes(3, message.startKey, false);

        if(message.endKey != null)
            output.writeBytes(4, message.endKey, false);

        if(message.offline != null)
            output.writeBool(5, message.offline, false);

        if(message.split != null)
            output.writeBool(6, message.split, false);
    }

    public String getFieldName(int number)
    {
        switch(number)
        {
            case 1: return "regionId";
            case 2: return "tableName";
            case 3: return "startKey";
            case 4: return "endKey";
            case 5: return "offline";
            case 6: return "split";
            default: return null;
        }
    }

    public int getFieldNumber(String name)
    {
        final Integer number = __fieldMap.get(name);
        return number == null ? 0 : number.intValue();
    }

    private static final java.util.HashMap<String,Integer> __fieldMap = new java.util.HashMap<String,Integer>();
    static
    {
        __fieldMap.put("regionId", 1);
        __fieldMap.put("tableName", 2);
        __fieldMap.put("startKey", 3);
        __fieldMap.put("endKey", 4);
        __fieldMap.put("offline", 5);
        __fieldMap.put("split", 6);
    }

}
