// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from resources

package c5db.client.generated;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class Result implements Externalizable, Message<Result>, Schema<Result>
{

    public static Schema<Result> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static Result getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final Result DEFAULT_INSTANCE = new Result();


    private List<Cell> cell;
    private Integer associatedCellCount;
    private Boolean exists;

    public Result()
    {

    }

    @Override
    public String toString() {
        return "Result{" +
                    "cell=" + cell +
                    ", associatedCellCount=" + associatedCellCount +
                    ", exists=" + exists +
                '}';
    }
    // getters and setters

    // cell

    public List<Cell> getCellList()
    {
        return cell;
    }


    public Result setCellList(List<Cell> cell)
    {
        this.cell = cell;
        return this;
    }

    // associatedCellCount

    public Integer getAssociatedCellCount()
    {
        return associatedCellCount;
    }


    public Result setAssociatedCellCount(Integer associatedCellCount)
    {
        this.associatedCellCount = associatedCellCount;
        return this;
    }

    // exists

    public Boolean getExists()
    {
        return exists;
    }


    public Result setExists(Boolean exists)
    {
        this.exists = exists;
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<Result> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public Result newMessage()
    {
        return new Result();
    }

    public Class<Result> typeClass()
    {
        return Result.class;
    }

    public String messageName()
    {
        return Result.class.getSimpleName();
    }

    public String messageFullName()
    {
        return Result.class.getName();
    }

    public boolean isInitialized(Result message)
    {
        return true;
    }

    public void mergeFrom(Input input, Result message) throws IOException
    {
        try {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    if(message.cell == null)
                        message.cell = new ArrayList<Cell>();
                    message.cell.add(input.mergeObject(null, Cell.getSchema()));
                    break;

                case 2:
                    message.associatedCellCount = input.readInt32();
                    break;
                case 3:
                    message.exists = input.readBool();
                    break;
                default:
                    input.handleUnknownField(number, this);
            }
        }
        } finally {
        if (message.cell != null)
            message.cell = java.util.Collections.unmodifiableList(message.cell);
        else
            message.cell = java.util.Collections.emptyList();
        }
    }


    public void writeTo(Output output, Result message) throws IOException
    {
        if(message.cell != null)
        {
            for(Cell cell : message.cell)
            {
                if(cell != null)
                    output.writeObject(1, cell, Cell.getSchema(), true);
            }
        }


        if(message.associatedCellCount != null)
            output.writeInt32(2, message.associatedCellCount, false);

        if(message.exists != null)
            output.writeBool(3, message.exists, false);
    }

    public String getFieldName(int number)
    {
        switch(number)
        {
            case 1: return "cell";
            case 2: return "associatedCellCount";
            case 3: return "exists";
            default: return null;
        }
    }

    public int getFieldNumber(String name)
    {
        final Integer number = __fieldMap.get(name);
        return number == null ? 0 : number.intValue();
    }

    private static final java.util.HashMap<String,Integer> __fieldMap = new java.util.HashMap<String,Integer>();
    static
    {
        __fieldMap.put("cell", 1);
        __fieldMap.put("associatedCellCount", 2);
        __fieldMap.put("exists", 3);
    }

}
