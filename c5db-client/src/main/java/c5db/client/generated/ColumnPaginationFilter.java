// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from resources

package c5db.client.generated;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.ByteString;import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public final class ColumnPaginationFilter implements Externalizable, Message<ColumnPaginationFilter>, Schema<ColumnPaginationFilter>
{

    public static Schema<ColumnPaginationFilter> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static ColumnPaginationFilter getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final ColumnPaginationFilter DEFAULT_INSTANCE = new ColumnPaginationFilter();


    private Integer limit;
    private Integer offset;
    private ByteString columnOffset;

    public ColumnPaginationFilter()
    {

    }

    public ColumnPaginationFilter(
        Integer limit
    )
    {
        this.limit = limit;
    }

    @Override
    public String toString() {
        return "ColumnPaginationFilter{" +
                    "limit=" + limit +
                    ", offset=" + offset +
                    ", columnOffset=" + columnOffset +
                '}';
    }
    // getters and setters

    // limit

    public Integer getLimit()
    {
        return limit;
    }


    public ColumnPaginationFilter setLimit(Integer limit)
    {
        this.limit = limit;
        return this;
    }

    // offset

    public Integer getOffset()
    {
        return offset;
    }


    public ColumnPaginationFilter setOffset(Integer offset)
    {
        this.offset = offset;
        return this;
    }

    // columnOffset

    public ByteString getColumnOffset()
    {
        return columnOffset;
    }


    public ColumnPaginationFilter setColumnOffset(ByteString columnOffset)
    {
        this.columnOffset = columnOffset;
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<ColumnPaginationFilter> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public ColumnPaginationFilter newMessage()
    {
        return new ColumnPaginationFilter();
    }

    public Class<ColumnPaginationFilter> typeClass()
    {
        return ColumnPaginationFilter.class;
    }

    public String messageName()
    {
        return ColumnPaginationFilter.class.getSimpleName();
    }

    public String messageFullName()
    {
        return ColumnPaginationFilter.class.getName();
    }

    public boolean isInitialized(ColumnPaginationFilter message)
    {
        return
            message.limit != null;
    }

    public void mergeFrom(Input input, ColumnPaginationFilter message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.limit = input.readInt32();
                    break;
                case 2:
                    message.offset = input.readInt32();
                    break;
                case 3:
                    message.columnOffset = input.readBytes();
                    break;
                default:
                    input.handleUnknownField(number, this);
            }
        }
    }


    public void writeTo(Output output, ColumnPaginationFilter message) throws IOException
    {
        if(message.limit == null)
            throw new UninitializedMessageException(message);
        output.writeInt32(1, message.limit, false);

        if(message.offset != null)
            output.writeInt32(2, message.offset, false);

        if(message.columnOffset != null)
            output.writeBytes(3, message.columnOffset, false);
    }

    public String getFieldName(int number)
    {
        switch(number)
        {
            case 1: return "limit";
            case 2: return "offset";
            case 3: return "columnOffset";
            default: return null;
        }
    }

    public int getFieldNumber(String name)
    {
        final Integer number = __fieldMap.get(name);
        return number == null ? 0 : number.intValue();
    }

    private static final java.util.HashMap<String,Integer> __fieldMap = new java.util.HashMap<String,Integer>();
    static
    {
        __fieldMap.put("limit", 1);
        __fieldMap.put("offset", 2);
        __fieldMap.put("columnOffset", 3);
    }

}
