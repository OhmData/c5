// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from resources

package c5db.client.generated;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class ScanResponse implements Externalizable, Message<ScanResponse>, Schema<ScanResponse>
{

    public static Schema<ScanResponse> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static ScanResponse getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final ScanResponse DEFAULT_INSTANCE = new ScanResponse();


    private List<Integer> cellsPerResult;
    private Long scannerId;
    private Boolean moreResults;
    private Integer ttl;
    private List<Result> results;

    public ScanResponse()
    {

    }

    @Override
    public String toString() {
        return "ScanResponse{" +
                    "cellsPerResult=" + cellsPerResult +
                    ", scannerId=" + scannerId +
                    ", moreResults=" + moreResults +
                    ", ttl=" + ttl +
                    ", results=" + results +
                '}';
    }
    // getters and setters

    // cellsPerResult

    public List<Integer> getCellsPerResultList()
    {
        return cellsPerResult;
    }


    public ScanResponse setCellsPerResultList(List<Integer> cellsPerResult)
    {
        this.cellsPerResult = cellsPerResult;
        return this;
    }

    // scannerId

    public Long getScannerId()
    {
        return scannerId;
    }


    public ScanResponse setScannerId(Long scannerId)
    {
        this.scannerId = scannerId;
        return this;
    }

    // moreResults

    public Boolean getMoreResults()
    {
        return moreResults;
    }


    public ScanResponse setMoreResults(Boolean moreResults)
    {
        this.moreResults = moreResults;
        return this;
    }

    // ttl

    public Integer getTtl()
    {
        return ttl;
    }


    public ScanResponse setTtl(Integer ttl)
    {
        this.ttl = ttl;
        return this;
    }

    // results

    public List<Result> getResultsList()
    {
        return results;
    }


    public ScanResponse setResultsList(List<Result> results)
    {
        this.results = results;
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<ScanResponse> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public ScanResponse newMessage()
    {
        return new ScanResponse();
    }

    public Class<ScanResponse> typeClass()
    {
        return ScanResponse.class;
    }

    public String messageName()
    {
        return ScanResponse.class.getSimpleName();
    }

    public String messageFullName()
    {
        return ScanResponse.class.getName();
    }

    public boolean isInitialized(ScanResponse message)
    {
        return true;
    }

    public void mergeFrom(Input input, ScanResponse message) throws IOException
    {
        try {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    if(message.cellsPerResult == null)
                        message.cellsPerResult = new ArrayList<Integer>();
                    message.cellsPerResult.add(input.readUInt32());break;
                case 2:
                    message.scannerId = input.readUInt64();
                    break;
                case 3:
                    message.moreResults = input.readBool();
                    break;
                case 4:
                    message.ttl = input.readUInt32();
                    break;
                case 5:
                    if(message.results == null)
                        message.results = new ArrayList<Result>();
                    message.results.add(input.mergeObject(null, Result.getSchema()));
                    break;

                default:
                    input.handleUnknownField(number, this);
            }
        }
        } finally {
        if (message.cellsPerResult != null)
            message.cellsPerResult = java.util.Collections.unmodifiableList(message.cellsPerResult);
        else
            message.cellsPerResult = java.util.Collections.emptyList();
        if (message.results != null)
            message.results = java.util.Collections.unmodifiableList(message.results);
        else
            message.results = java.util.Collections.emptyList();
        }
    }


    public void writeTo(Output output, ScanResponse message) throws IOException
    {
        if(message.cellsPerResult != null)
        {
            for(Integer cellsPerResult : message.cellsPerResult)
            {
                if(cellsPerResult != null)
                    output.writeUInt32(1, cellsPerResult, true);
            }
        }

        if(message.scannerId != null)
            output.writeUInt64(2, message.scannerId, false);

        if(message.moreResults != null)
            output.writeBool(3, message.moreResults, false);

        if(message.ttl != null)
            output.writeUInt32(4, message.ttl, false);

        if(message.results != null)
        {
            for(Result results : message.results)
            {
                if(results != null)
                    output.writeObject(5, results, Result.getSchema(), true);
            }
        }

    }

    public String getFieldName(int number)
    {
        switch(number)
        {
            case 1: return "cellsPerResult";
            case 2: return "scannerId";
            case 3: return "moreResults";
            case 4: return "ttl";
            case 5: return "results";
            default: return null;
        }
    }

    public int getFieldNumber(String name)
    {
        final Integer number = __fieldMap.get(name);
        return number == null ? 0 : number.intValue();
    }

    private static final java.util.HashMap<String,Integer> __fieldMap = new java.util.HashMap<String,Integer>();
    static
    {
        __fieldMap.put("cellsPerResult", 1);
        __fieldMap.put("scannerId", 2);
        __fieldMap.put("moreResults", 3);
        __fieldMap.put("ttl", 4);
        __fieldMap.put("results", 5);
    }

}
