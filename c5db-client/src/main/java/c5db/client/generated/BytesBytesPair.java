// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from resources

package c5db.client.generated;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.ByteString;import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public final class BytesBytesPair implements Externalizable, Message<BytesBytesPair>, Schema<BytesBytesPair>
{

    public static Schema<BytesBytesPair> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static BytesBytesPair getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final BytesBytesPair DEFAULT_INSTANCE = new BytesBytesPair();


    private ByteString first;
    private ByteString second;

    public BytesBytesPair()
    {

    }

    public BytesBytesPair(
        ByteString first,
        ByteString second
    )
    {
        this.first = first;
        this.second = second;
    }

    @Override
    public String toString() {
        return "BytesBytesPair{" +
                    "first=" + first +
                    ", second=" + second +
                '}';
    }
    // getters and setters

    // first

    public ByteString getFirst()
    {
        return first;
    }


    public BytesBytesPair setFirst(ByteString first)
    {
        this.first = first;
        return this;
    }

    // second

    public ByteString getSecond()
    {
        return second;
    }


    public BytesBytesPair setSecond(ByteString second)
    {
        this.second = second;
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<BytesBytesPair> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public BytesBytesPair newMessage()
    {
        return new BytesBytesPair();
    }

    public Class<BytesBytesPair> typeClass()
    {
        return BytesBytesPair.class;
    }

    public String messageName()
    {
        return BytesBytesPair.class.getSimpleName();
    }

    public String messageFullName()
    {
        return BytesBytesPair.class.getName();
    }

    public boolean isInitialized(BytesBytesPair message)
    {
        return
            message.first != null 
            && message.second != null;
    }

    public void mergeFrom(Input input, BytesBytesPair message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.first = input.readBytes();
                    break;
                case 2:
                    message.second = input.readBytes();
                    break;
                default:
                    input.handleUnknownField(number, this);
            }
        }
    }


    public void writeTo(Output output, BytesBytesPair message) throws IOException
    {
        if(message.first == null)
            throw new UninitializedMessageException(message);
        output.writeBytes(1, message.first, false);

        if(message.second == null)
            throw new UninitializedMessageException(message);
        output.writeBytes(2, message.second, false);
    }

    public String getFieldName(int number)
    {
        switch(number)
        {
            case 1: return "first";
            case 2: return "second";
            default: return null;
        }
    }

    public int getFieldNumber(String name)
    {
        final Integer number = __fieldMap.get(name);
        return number == null ? 0 : number.intValue();
    }

    private static final java.util.HashMap<String,Integer> __fieldMap = new java.util.HashMap<String,Integer>();
    static
    {
        __fieldMap.put("first", 1);
        __fieldMap.put("second", 2);
    }

}
