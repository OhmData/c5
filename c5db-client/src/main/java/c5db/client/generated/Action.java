// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from resources

package c5db.client.generated;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class Action implements Externalizable, Message<Action>, Schema<Action>
{

    public static Schema<Action> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static Action getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final Action DEFAULT_INSTANCE = new Action();


    private Integer index;
    private MutationProto mutation;
    private Get get;

    public Action()
    {

    }

    @Override
    public String toString() {
        return "Action{" +
                    "index=" + index +
                    ", mutation=" + mutation +
                    ", get=" + get +
                '}';
    }
    // getters and setters

    // index

    public Integer getIndex()
    {
        return index;
    }


    public Action setIndex(Integer index)
    {
        this.index = index;
        return this;
    }

    // mutation

    public MutationProto getMutation()
    {
        return mutation;
    }


    public Action setMutation(MutationProto mutation)
    {
        this.mutation = mutation;
        return this;
    }

    // get

    public Get getGet()
    {
        return get;
    }


    public Action setGet(Get get)
    {
        this.get = get;
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<Action> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public Action newMessage()
    {
        return new Action();
    }

    public Class<Action> typeClass()
    {
        return Action.class;
    }

    public String messageName()
    {
        return Action.class.getSimpleName();
    }

    public String messageFullName()
    {
        return Action.class.getName();
    }

    public boolean isInitialized(Action message)
    {
        return true;
    }

    public void mergeFrom(Input input, Action message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.index = input.readUInt32();
                    break;
                case 2:
                    message.mutation = input.mergeObject(message.mutation, MutationProto.getSchema());
                    break;

                case 3:
                    message.get = input.mergeObject(message.get, Get.getSchema());
                    break;

                default:
                    input.handleUnknownField(number, this);
            }
        }
    }


    public void writeTo(Output output, Action message) throws IOException
    {
        if(message.index != null)
            output.writeUInt32(1, message.index, false);

        if(message.mutation != null)
             output.writeObject(2, message.mutation, MutationProto.getSchema(), false);


        if(message.get != null)
             output.writeObject(3, message.get, Get.getSchema(), false);

    }

    public String getFieldName(int number)
    {
        switch(number)
        {
            case 1: return "index";
            case 2: return "mutation";
            case 3: return "get";
            default: return null;
        }
    }

    public int getFieldNumber(String name)
    {
        final Integer number = __fieldMap.get(name);
        return number == null ? 0 : number.intValue();
    }

    private static final java.util.HashMap<String,Integer> __fieldMap = new java.util.HashMap<String,Integer>();
    static
    {
        __fieldMap.put("index", 1);
        __fieldMap.put("mutation", 2);
        __fieldMap.put("get", 3);
    }

}
