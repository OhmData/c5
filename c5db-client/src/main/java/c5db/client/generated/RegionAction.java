// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from resources

package c5db.client.generated;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public final class RegionAction implements Externalizable, Message<RegionAction>, Schema<RegionAction>
{

    public static Schema<RegionAction> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static RegionAction getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final RegionAction DEFAULT_INSTANCE = new RegionAction();


    private RegionSpecifier region;
    private Boolean atomic;
    private List<Action> action;

    public RegionAction()
    {

    }

    public RegionAction(
        RegionSpecifier region
    )
    {
        this.region = region;
    }

    @Override
    public String toString() {
        return "RegionAction{" +
                    "region=" + region +
                    ", atomic=" + atomic +
                    ", action=" + action +
                '}';
    }
    // getters and setters

    // region

    public RegionSpecifier getRegion()
    {
        return region;
    }


    public RegionAction setRegion(RegionSpecifier region)
    {
        this.region = region;
        return this;
    }

    // atomic

    public Boolean getAtomic()
    {
        return atomic;
    }


    public RegionAction setAtomic(Boolean atomic)
    {
        this.atomic = atomic;
        return this;
    }

    // action

    public List<Action> getActionList()
    {
        return action;
    }


    public RegionAction setActionList(List<Action> action)
    {
        this.action = action;
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<RegionAction> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public RegionAction newMessage()
    {
        return new RegionAction();
    }

    public Class<RegionAction> typeClass()
    {
        return RegionAction.class;
    }

    public String messageName()
    {
        return RegionAction.class.getSimpleName();
    }

    public String messageFullName()
    {
        return RegionAction.class.getName();
    }

    public boolean isInitialized(RegionAction message)
    {
        return
            message.region != null;
    }

    public void mergeFrom(Input input, RegionAction message) throws IOException
    {
        try {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.region = input.mergeObject(message.region, RegionSpecifier.getSchema());
                    break;

                case 2:
                    message.atomic = input.readBool();
                    break;
                case 3:
                    if(message.action == null)
                        message.action = new ArrayList<Action>();
                    message.action.add(input.mergeObject(null, Action.getSchema()));
                    break;

                default:
                    input.handleUnknownField(number, this);
            }
        }
        } finally {
        if (message.action != null)
            message.action = java.util.Collections.unmodifiableList(message.action);
        else
            message.action = java.util.Collections.emptyList();
        }
    }


    public void writeTo(Output output, RegionAction message) throws IOException
    {
        if(message.region == null)
            throw new UninitializedMessageException(message);
        output.writeObject(1, message.region, RegionSpecifier.getSchema(), false);


        if(message.atomic != null)
            output.writeBool(2, message.atomic, false);

        if(message.action != null)
        {
            for(Action action : message.action)
            {
                if(action != null)
                    output.writeObject(3, action, Action.getSchema(), true);
            }
        }

    }

    public String getFieldName(int number)
    {
        switch(number)
        {
            case 1: return "region";
            case 2: return "atomic";
            case 3: return "action";
            default: return null;
        }
    }

    public int getFieldNumber(String name)
    {
        final Integer number = __fieldMap.get(name);
        return number == null ? 0 : number.intValue();
    }

    private static final java.util.HashMap<String,Integer> __fieldMap = new java.util.HashMap<String,Integer>();
    static
    {
        __fieldMap.put("region", 1);
        __fieldMap.put("atomic", 2);
        __fieldMap.put("action", 3);
    }

}
