// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from resources

package c5db.client.generated;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.ByteString;import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public final class CoprocessorServiceCall implements Externalizable, Message<CoprocessorServiceCall>, Schema<CoprocessorServiceCall>
{

    public static Schema<CoprocessorServiceCall> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static CoprocessorServiceCall getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final CoprocessorServiceCall DEFAULT_INSTANCE = new CoprocessorServiceCall();


    private ByteString row;
    private String serviceName;
    private String methodName;
    private ByteString request;

    public CoprocessorServiceCall()
    {

    }

    public CoprocessorServiceCall(
        ByteString row,
        String serviceName,
        String methodName,
        ByteString request
    )
    {
        this.row = row;
        this.serviceName = serviceName;
        this.methodName = methodName;
        this.request = request;
    }

    @Override
    public String toString() {
        return "CoprocessorServiceCall{" +
                    "row=" + row +
                    ", serviceName=" + serviceName +
                    ", methodName=" + methodName +
                    ", request=" + request +
                '}';
    }
    // getters and setters

    // row

    public ByteString getRow()
    {
        return row;
    }


    public CoprocessorServiceCall setRow(ByteString row)
    {
        this.row = row;
        return this;
    }

    // serviceName

    public String getServiceName()
    {
        return serviceName;
    }


    public CoprocessorServiceCall setServiceName(String serviceName)
    {
        this.serviceName = serviceName;
        return this;
    }

    // methodName

    public String getMethodName()
    {
        return methodName;
    }


    public CoprocessorServiceCall setMethodName(String methodName)
    {
        this.methodName = methodName;
        return this;
    }

    // request

    public ByteString getRequest()
    {
        return request;
    }


    public CoprocessorServiceCall setRequest(ByteString request)
    {
        this.request = request;
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<CoprocessorServiceCall> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public CoprocessorServiceCall newMessage()
    {
        return new CoprocessorServiceCall();
    }

    public Class<CoprocessorServiceCall> typeClass()
    {
        return CoprocessorServiceCall.class;
    }

    public String messageName()
    {
        return CoprocessorServiceCall.class.getSimpleName();
    }

    public String messageFullName()
    {
        return CoprocessorServiceCall.class.getName();
    }

    public boolean isInitialized(CoprocessorServiceCall message)
    {
        return
            message.row != null 
            && message.serviceName != null 
            && message.methodName != null 
            && message.request != null;
    }

    public void mergeFrom(Input input, CoprocessorServiceCall message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.row = input.readBytes();
                    break;
                case 2:
                    message.serviceName = input.readString();
                    break;
                case 3:
                    message.methodName = input.readString();
                    break;
                case 4:
                    message.request = input.readBytes();
                    break;
                default:
                    input.handleUnknownField(number, this);
            }
        }
    }


    public void writeTo(Output output, CoprocessorServiceCall message) throws IOException
    {
        if(message.row == null)
            throw new UninitializedMessageException(message);
        output.writeBytes(1, message.row, false);

        if(message.serviceName == null)
            throw new UninitializedMessageException(message);
        output.writeString(2, message.serviceName, false);

        if(message.methodName == null)
            throw new UninitializedMessageException(message);
        output.writeString(3, message.methodName, false);

        if(message.request == null)
            throw new UninitializedMessageException(message);
        output.writeBytes(4, message.request, false);
    }

    public String getFieldName(int number)
    {
        switch(number)
        {
            case 1: return "row";
            case 2: return "serviceName";
            case 3: return "methodName";
            case 4: return "request";
            default: return null;
        }
    }

    public int getFieldNumber(String name)
    {
        final Integer number = __fieldMap.get(name);
        return number == null ? 0 : number.intValue();
    }

    private static final java.util.HashMap<String,Integer> __fieldMap = new java.util.HashMap<String,Integer>();
    static
    {
        __fieldMap.put("row", 1);
        __fieldMap.put("serviceName", 2);
        __fieldMap.put("methodName", 3);
        __fieldMap.put("request", 4);
    }

}
