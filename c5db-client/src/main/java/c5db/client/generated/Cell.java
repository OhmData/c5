// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from resources

package c5db.client.generated;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.ByteString;import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class Cell implements Externalizable, Message<Cell>, Schema<Cell>
{

    public static Schema<Cell> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static Cell getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final Cell DEFAULT_INSTANCE = new Cell();


    private ByteString row;
    private ByteString family;
    private ByteString qualifier;
    private Long timestamp;
    private CellType cellType;
    private ByteString value;

    public Cell()
    {

    }

    @Override
    public String toString() {
        return "Cell{" +
                    "row=" + row +
                    ", family=" + family +
                    ", qualifier=" + qualifier +
                    ", timestamp=" + timestamp +
                    ", cellType=" + cellType +
                    ", value=" + value +
                '}';
    }
    // getters and setters

    // row

    public ByteString getRow()
    {
        return row;
    }


    public Cell setRow(ByteString row)
    {
        this.row = row;
        return this;
    }

    // family

    public ByteString getFamily()
    {
        return family;
    }


    public Cell setFamily(ByteString family)
    {
        this.family = family;
        return this;
    }

    // qualifier

    public ByteString getQualifier()
    {
        return qualifier;
    }


    public Cell setQualifier(ByteString qualifier)
    {
        this.qualifier = qualifier;
        return this;
    }

    // timestamp

    public Long getTimestamp()
    {
        return timestamp;
    }


    public Cell setTimestamp(Long timestamp)
    {
        this.timestamp = timestamp;
        return this;
    }

    // cellType

    public CellType getCellType()
    {
        return cellType == null ? CellType.MINIMUM : cellType;
    }


    public Cell setCellType(CellType cellType)
    {
        this.cellType = cellType;
        return this;
    }

    // value

    public ByteString getValue()
    {
        return value;
    }


    public Cell setValue(ByteString value)
    {
        this.value = value;
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<Cell> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public Cell newMessage()
    {
        return new Cell();
    }

    public Class<Cell> typeClass()
    {
        return Cell.class;
    }

    public String messageName()
    {
        return Cell.class.getSimpleName();
    }

    public String messageFullName()
    {
        return Cell.class.getName();
    }

    public boolean isInitialized(Cell message)
    {
        return true;
    }

    public void mergeFrom(Input input, Cell message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.row = input.readBytes();
                    break;
                case 2:
                    message.family = input.readBytes();
                    break;
                case 3:
                    message.qualifier = input.readBytes();
                    break;
                case 4:
                    message.timestamp = input.readUInt64();
                    break;
                case 5:
                    message.cellType = CellType.valueOf(input.readEnum());
                    break;

                case 6:
                    message.value = input.readBytes();
                    break;
                default:
                    input.handleUnknownField(number, this);
            }
        }
    }


    public void writeTo(Output output, Cell message) throws IOException
    {
        if(message.row != null)
            output.writeBytes(1, message.row, false);

        if(message.family != null)
            output.writeBytes(2, message.family, false);

        if(message.qualifier != null)
            output.writeBytes(3, message.qualifier, false);

        if(message.timestamp != null)
            output.writeUInt64(4, message.timestamp, false);

        if(message.cellType != null)
             output.writeEnum(5, message.cellType.number, false);

        if(message.value != null)
            output.writeBytes(6, message.value, false);
    }

    public String getFieldName(int number)
    {
        switch(number)
        {
            case 1: return "row";
            case 2: return "family";
            case 3: return "qualifier";
            case 4: return "timestamp";
            case 5: return "cellType";
            case 6: return "value";
            default: return null;
        }
    }

    public int getFieldNumber(String name)
    {
        final Integer number = __fieldMap.get(name);
        return number == null ? 0 : number.intValue();
    }

    private static final java.util.HashMap<String,Integer> __fieldMap = new java.util.HashMap<String,Integer>();
    static
    {
        __fieldMap.put("row", 1);
        __fieldMap.put("family", 2);
        __fieldMap.put("qualifier", 3);
        __fieldMap.put("timestamp", 4);
        __fieldMap.put("cellType", 5);
        __fieldMap.put("value", 6);
    }

}
