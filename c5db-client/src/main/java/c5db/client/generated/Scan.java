// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from resources

package c5db.client.generated;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import com.dyuproject.protostuff.ByteString;import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class Scan implements Externalizable, Message<Scan>, Schema<Scan>
{

    public static Schema<Scan> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static Scan getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final Scan DEFAULT_INSTANCE = new Scan();

    static final Integer DEFAULT_MAX_VERSIONS = new Integer(1);
    static final Boolean DEFAULT_CACHE_BLOCKS = new Boolean(true);

    private List<Column> column;
    private List<NameBytesPair> attribute;
    private ByteString startRow;
    private ByteString stopRow;
    private Filter filter;
    private TimeRange timeRange;
    private Integer maxVersions = DEFAULT_MAX_VERSIONS;
    private Boolean cacheBlocks = DEFAULT_CACHE_BLOCKS;
    private Integer batchSize;
    private Long maxResultSize;
    private Integer storeLimit;
    private Integer storeOffset;
    private Boolean loadColumnFamiliesOnDemand;
    private Boolean small;

    public Scan()
    {

    }

    @Override
    public String toString() {
        return "Scan{" +
                    "column=" + column +
                    ", attribute=" + attribute +
                    ", startRow=" + startRow +
                    ", stopRow=" + stopRow +
                    ", filter=" + filter +
                    ", timeRange=" + timeRange +
                    ", maxVersions=" + maxVersions +
                    ", cacheBlocks=" + cacheBlocks +
                    ", batchSize=" + batchSize +
                    ", maxResultSize=" + maxResultSize +
                    ", storeLimit=" + storeLimit +
                    ", storeOffset=" + storeOffset +
                    ", loadColumnFamiliesOnDemand=" + loadColumnFamiliesOnDemand +
                    ", small=" + small +
                '}';
    }
    // getters and setters

    // column

    public List<Column> getColumnList()
    {
        return column;
    }


    public Scan setColumnList(List<Column> column)
    {
        this.column = column;
        return this;
    }

    // attribute

    public List<NameBytesPair> getAttributeList()
    {
        return attribute;
    }


    public Scan setAttributeList(List<NameBytesPair> attribute)
    {
        this.attribute = attribute;
        return this;
    }

    // startRow

    public ByteString getStartRow()
    {
        return startRow;
    }


    public Scan setStartRow(ByteString startRow)
    {
        this.startRow = startRow;
        return this;
    }

    // stopRow

    public ByteString getStopRow()
    {
        return stopRow;
    }


    public Scan setStopRow(ByteString stopRow)
    {
        this.stopRow = stopRow;
        return this;
    }

    // filter

    public Filter getFilter()
    {
        return filter;
    }


    public Scan setFilter(Filter filter)
    {
        this.filter = filter;
        return this;
    }

    // timeRange

    public TimeRange getTimeRange()
    {
        return timeRange;
    }


    public Scan setTimeRange(TimeRange timeRange)
    {
        this.timeRange = timeRange;
        return this;
    }

    // maxVersions

    public Integer getMaxVersions()
    {
        return maxVersions;
    }


    public Scan setMaxVersions(Integer maxVersions)
    {
        this.maxVersions = maxVersions;
        return this;
    }

    // cacheBlocks

    public Boolean getCacheBlocks()
    {
        return cacheBlocks;
    }


    public Scan setCacheBlocks(Boolean cacheBlocks)
    {
        this.cacheBlocks = cacheBlocks;
        return this;
    }

    // batchSize

    public Integer getBatchSize()
    {
        return batchSize;
    }


    public Scan setBatchSize(Integer batchSize)
    {
        this.batchSize = batchSize;
        return this;
    }

    // maxResultSize

    public Long getMaxResultSize()
    {
        return maxResultSize;
    }


    public Scan setMaxResultSize(Long maxResultSize)
    {
        this.maxResultSize = maxResultSize;
        return this;
    }

    // storeLimit

    public Integer getStoreLimit()
    {
        return storeLimit;
    }


    public Scan setStoreLimit(Integer storeLimit)
    {
        this.storeLimit = storeLimit;
        return this;
    }

    // storeOffset

    public Integer getStoreOffset()
    {
        return storeOffset;
    }


    public Scan setStoreOffset(Integer storeOffset)
    {
        this.storeOffset = storeOffset;
        return this;
    }

    // loadColumnFamiliesOnDemand

    public Boolean getLoadColumnFamiliesOnDemand()
    {
        return loadColumnFamiliesOnDemand;
    }


    public Scan setLoadColumnFamiliesOnDemand(Boolean loadColumnFamiliesOnDemand)
    {
        this.loadColumnFamiliesOnDemand = loadColumnFamiliesOnDemand;
        return this;
    }

    // small

    public Boolean getSmall()
    {
        return small;
    }


    public Scan setSmall(Boolean small)
    {
        this.small = small;
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<Scan> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public Scan newMessage()
    {
        return new Scan();
    }

    public Class<Scan> typeClass()
    {
        return Scan.class;
    }

    public String messageName()
    {
        return Scan.class.getSimpleName();
    }

    public String messageFullName()
    {
        return Scan.class.getName();
    }

    public boolean isInitialized(Scan message)
    {
        return true;
    }

    public void mergeFrom(Input input, Scan message) throws IOException
    {
        try {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    if(message.column == null)
                        message.column = new ArrayList<Column>();
                    message.column.add(input.mergeObject(null, Column.getSchema()));
                    break;

                case 2:
                    if(message.attribute == null)
                        message.attribute = new ArrayList<NameBytesPair>();
                    message.attribute.add(input.mergeObject(null, NameBytesPair.getSchema()));
                    break;

                case 3:
                    message.startRow = input.readBytes();
                    break;
                case 4:
                    message.stopRow = input.readBytes();
                    break;
                case 5:
                    message.filter = input.mergeObject(message.filter, Filter.getSchema());
                    break;

                case 6:
                    message.timeRange = input.mergeObject(message.timeRange, TimeRange.getSchema());
                    break;

                case 7:
                    message.maxVersions = input.readUInt32();
                    break;
                case 8:
                    message.cacheBlocks = input.readBool();
                    break;
                case 9:
                    message.batchSize = input.readUInt32();
                    break;
                case 10:
                    message.maxResultSize = input.readUInt64();
                    break;
                case 11:
                    message.storeLimit = input.readUInt32();
                    break;
                case 12:
                    message.storeOffset = input.readUInt32();
                    break;
                case 13:
                    message.loadColumnFamiliesOnDemand = input.readBool();
                    break;
                case 14:
                    message.small = input.readBool();
                    break;
                default:
                    input.handleUnknownField(number, this);
            }
        }
        } finally {
        if (message.column != null)
            message.column = java.util.Collections.unmodifiableList(message.column);
        else
            message.column = java.util.Collections.emptyList();
        if (message.attribute != null)
            message.attribute = java.util.Collections.unmodifiableList(message.attribute);
        else
            message.attribute = java.util.Collections.emptyList();
        }
    }


    public void writeTo(Output output, Scan message) throws IOException
    {
        if(message.column != null)
        {
            for(Column column : message.column)
            {
                if(column != null)
                    output.writeObject(1, column, Column.getSchema(), true);
            }
        }


        if(message.attribute != null)
        {
            for(NameBytesPair attribute : message.attribute)
            {
                if(attribute != null)
                    output.writeObject(2, attribute, NameBytesPair.getSchema(), true);
            }
        }


        if(message.startRow != null)
            output.writeBytes(3, message.startRow, false);

        if(message.stopRow != null)
            output.writeBytes(4, message.stopRow, false);

        if(message.filter != null)
             output.writeObject(5, message.filter, Filter.getSchema(), false);


        if(message.timeRange != null)
             output.writeObject(6, message.timeRange, TimeRange.getSchema(), false);


        if(message.maxVersions != null && message.maxVersions != DEFAULT_MAX_VERSIONS)
            output.writeUInt32(7, message.maxVersions, false);

        if(message.cacheBlocks != null && message.cacheBlocks != DEFAULT_CACHE_BLOCKS)
            output.writeBool(8, message.cacheBlocks, false);

        if(message.batchSize != null)
            output.writeUInt32(9, message.batchSize, false);

        if(message.maxResultSize != null)
            output.writeUInt64(10, message.maxResultSize, false);

        if(message.storeLimit != null)
            output.writeUInt32(11, message.storeLimit, false);

        if(message.storeOffset != null)
            output.writeUInt32(12, message.storeOffset, false);

        if(message.loadColumnFamiliesOnDemand != null)
            output.writeBool(13, message.loadColumnFamiliesOnDemand, false);

        if(message.small != null)
            output.writeBool(14, message.small, false);
    }

    public String getFieldName(int number)
    {
        switch(number)
        {
            case 1: return "column";
            case 2: return "attribute";
            case 3: return "startRow";
            case 4: return "stopRow";
            case 5: return "filter";
            case 6: return "timeRange";
            case 7: return "maxVersions";
            case 8: return "cacheBlocks";
            case 9: return "batchSize";
            case 10: return "maxResultSize";
            case 11: return "storeLimit";
            case 12: return "storeOffset";
            case 13: return "loadColumnFamiliesOnDemand";
            case 14: return "small";
            default: return null;
        }
    }

    public int getFieldNumber(String name)
    {
        final Integer number = __fieldMap.get(name);
        return number == null ? 0 : number.intValue();
    }

    private static final java.util.HashMap<String,Integer> __fieldMap = new java.util.HashMap<String,Integer>();
    static
    {
        __fieldMap.put("column", 1);
        __fieldMap.put("attribute", 2);
        __fieldMap.put("startRow", 3);
        __fieldMap.put("stopRow", 4);
        __fieldMap.put("filter", 5);
        __fieldMap.put("timeRange", 6);
        __fieldMap.put("maxVersions", 7);
        __fieldMap.put("cacheBlocks", 8);
        __fieldMap.put("batchSize", 9);
        __fieldMap.put("maxResultSize", 10);
        __fieldMap.put("storeLimit", 11);
        __fieldMap.put("storeOffset", 12);
        __fieldMap.put("loadColumnFamiliesOnDemand", 13);
        __fieldMap.put("small", 14);
    }

}
