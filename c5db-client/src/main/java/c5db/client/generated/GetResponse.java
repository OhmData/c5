// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from resources

package c5db.client.generated;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class GetResponse implements Externalizable, Message<GetResponse>, Schema<GetResponse>
{

    public static Schema<GetResponse> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static GetResponse getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final GetResponse DEFAULT_INSTANCE = new GetResponse();


    private Result result;

    public GetResponse()
    {

    }

    @Override
    public String toString() {
        return "GetResponse{" +
                    "result=" + result +
                '}';
    }
    // getters and setters

    // result

    public Result getResult()
    {
        return result;
    }


    public GetResponse setResult(Result result)
    {
        this.result = result;
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<GetResponse> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public GetResponse newMessage()
    {
        return new GetResponse();
    }

    public Class<GetResponse> typeClass()
    {
        return GetResponse.class;
    }

    public String messageName()
    {
        return GetResponse.class.getSimpleName();
    }

    public String messageFullName()
    {
        return GetResponse.class.getName();
    }

    public boolean isInitialized(GetResponse message)
    {
        return true;
    }

    public void mergeFrom(Input input, GetResponse message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.result = input.mergeObject(message.result, Result.getSchema());
                    break;

                default:
                    input.handleUnknownField(number, this);
            }
        }
    }


    public void writeTo(Output output, GetResponse message) throws IOException
    {
        if(message.result != null)
             output.writeObject(1, message.result, Result.getSchema(), false);

    }

    public String getFieldName(int number)
    {
        switch(number)
        {
            case 1: return "result";
            default: return null;
        }
    }

    public int getFieldNumber(String name)
    {
        final Integer number = __fieldMap.get(name);
        return number == null ? 0 : number.intValue();
    }

    private static final java.util.HashMap<String,Integer> __fieldMap = new java.util.HashMap<String,Integer>();
    static
    {
        __fieldMap.put("result", 1);
    }

}
