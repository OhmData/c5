// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from resources

package c5db.client.generated;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class FavoredNodes implements Externalizable, Message<FavoredNodes>, Schema<FavoredNodes>
{

    public static Schema<FavoredNodes> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static FavoredNodes getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final FavoredNodes DEFAULT_INSTANCE = new FavoredNodes();


    private List<ServerName> favoredNode;

    public FavoredNodes()
    {

    }

    @Override
    public String toString() {
        return "FavoredNodes{" +
                    "favoredNode=" + favoredNode +
                '}';
    }
    // getters and setters

    // favoredNode

    public List<ServerName> getFavoredNodeList()
    {
        return favoredNode;
    }


    public FavoredNodes setFavoredNodeList(List<ServerName> favoredNode)
    {
        this.favoredNode = favoredNode;
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<FavoredNodes> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public FavoredNodes newMessage()
    {
        return new FavoredNodes();
    }

    public Class<FavoredNodes> typeClass()
    {
        return FavoredNodes.class;
    }

    public String messageName()
    {
        return FavoredNodes.class.getSimpleName();
    }

    public String messageFullName()
    {
        return FavoredNodes.class.getName();
    }

    public boolean isInitialized(FavoredNodes message)
    {
        return true;
    }

    public void mergeFrom(Input input, FavoredNodes message) throws IOException
    {
        try {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    if(message.favoredNode == null)
                        message.favoredNode = new ArrayList<ServerName>();
                    message.favoredNode.add(input.mergeObject(null, ServerName.getSchema()));
                    break;

                default:
                    input.handleUnknownField(number, this);
            }
        }
        } finally {
        if (message.favoredNode != null)
            message.favoredNode = java.util.Collections.unmodifiableList(message.favoredNode);
        else
            message.favoredNode = java.util.Collections.emptyList();
        }
    }


    public void writeTo(Output output, FavoredNodes message) throws IOException
    {
        if(message.favoredNode != null)
        {
            for(ServerName favoredNode : message.favoredNode)
            {
                if(favoredNode != null)
                    output.writeObject(1, favoredNode, ServerName.getSchema(), true);
            }
        }

    }

    public String getFieldName(int number)
    {
        switch(number)
        {
            case 1: return "favoredNode";
            default: return null;
        }
    }

    public int getFieldNumber(String name)
    {
        final Integer number = __fieldMap.get(name);
        return number == null ? 0 : number.intValue();
    }

    private static final java.util.HashMap<String,Integer> __fieldMap = new java.util.HashMap<String,Integer>();
    static
    {
        __fieldMap.put("favoredNode", 1);
    }

}
