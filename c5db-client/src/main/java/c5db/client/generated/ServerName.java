// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from resources

package c5db.client.generated;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public final class ServerName implements Externalizable, Message<ServerName>, Schema<ServerName>
{

    public static Schema<ServerName> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static ServerName getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final ServerName DEFAULT_INSTANCE = new ServerName();


    private String hostName;
    private Integer port;
    private Long startCode;

    public ServerName()
    {

    }

    public ServerName(
        String hostName
    )
    {
        this.hostName = hostName;
    }

    @Override
    public String toString() {
        return "ServerName{" +
                    "hostName=" + hostName +
                    ", port=" + port +
                    ", startCode=" + startCode +
                '}';
    }
    // getters and setters

    // hostName

    public String getHostName()
    {
        return hostName;
    }


    public ServerName setHostName(String hostName)
    {
        this.hostName = hostName;
        return this;
    }

    // port

    public Integer getPort()
    {
        return port;
    }


    public ServerName setPort(Integer port)
    {
        this.port = port;
        return this;
    }

    // startCode

    public Long getStartCode()
    {
        return startCode;
    }


    public ServerName setStartCode(Long startCode)
    {
        this.startCode = startCode;
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<ServerName> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public ServerName newMessage()
    {
        return new ServerName();
    }

    public Class<ServerName> typeClass()
    {
        return ServerName.class;
    }

    public String messageName()
    {
        return ServerName.class.getSimpleName();
    }

    public String messageFullName()
    {
        return ServerName.class.getName();
    }

    public boolean isInitialized(ServerName message)
    {
        return
            message.hostName != null;
    }

    public void mergeFrom(Input input, ServerName message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.hostName = input.readString();
                    break;
                case 2:
                    message.port = input.readUInt32();
                    break;
                case 3:
                    message.startCode = input.readUInt64();
                    break;
                default:
                    input.handleUnknownField(number, this);
            }
        }
    }


    public void writeTo(Output output, ServerName message) throws IOException
    {
        if(message.hostName == null)
            throw new UninitializedMessageException(message);
        output.writeString(1, message.hostName, false);

        if(message.port != null)
            output.writeUInt32(2, message.port, false);

        if(message.startCode != null)
            output.writeUInt64(3, message.startCode, false);
    }

    public String getFieldName(int number)
    {
        switch(number)
        {
            case 1: return "hostName";
            case 2: return "port";
            case 3: return "startCode";
            default: return null;
        }
    }

    public int getFieldNumber(String name)
    {
        final Integer number = __fieldMap.get(name);
        return number == null ? 0 : number.intValue();
    }

    private static final java.util.HashMap<String,Integer> __fieldMap = new java.util.HashMap<String,Integer>();
    static
    {
        __fieldMap.put("hostName", 1);
        __fieldMap.put("port", 2);
        __fieldMap.put("startCode", 3);
    }

}
