// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from resources

package c5db.client.generated;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import com.dyuproject.protostuff.ByteString;import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public final class ColumnFamilySchema implements Externalizable, Message<ColumnFamilySchema>, Schema<ColumnFamilySchema>
{

    public static Schema<ColumnFamilySchema> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static ColumnFamilySchema getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final ColumnFamilySchema DEFAULT_INSTANCE = new ColumnFamilySchema();


    private ByteString name;
    private List<BytesBytesPair> attributes;
    private List<NameStringPair> configuration;

    public ColumnFamilySchema()
    {

    }

    public ColumnFamilySchema(
        ByteString name
    )
    {
        this.name = name;
    }

    @Override
    public String toString() {
        return "ColumnFamilySchema{" +
                    "name=" + name +
                    ", attributes=" + attributes +
                    ", configuration=" + configuration +
                '}';
    }
    // getters and setters

    // name

    public ByteString getName()
    {
        return name;
    }


    public ColumnFamilySchema setName(ByteString name)
    {
        this.name = name;
        return this;
    }

    // attributes

    public List<BytesBytesPair> getAttributesList()
    {
        return attributes;
    }


    public ColumnFamilySchema setAttributesList(List<BytesBytesPair> attributes)
    {
        this.attributes = attributes;
        return this;
    }

    // configuration

    public List<NameStringPair> getConfigurationList()
    {
        return configuration;
    }


    public ColumnFamilySchema setConfigurationList(List<NameStringPair> configuration)
    {
        this.configuration = configuration;
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<ColumnFamilySchema> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public ColumnFamilySchema newMessage()
    {
        return new ColumnFamilySchema();
    }

    public Class<ColumnFamilySchema> typeClass()
    {
        return ColumnFamilySchema.class;
    }

    public String messageName()
    {
        return ColumnFamilySchema.class.getSimpleName();
    }

    public String messageFullName()
    {
        return ColumnFamilySchema.class.getName();
    }

    public boolean isInitialized(ColumnFamilySchema message)
    {
        return
            message.name != null;
    }

    public void mergeFrom(Input input, ColumnFamilySchema message) throws IOException
    {
        try {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.name = input.readBytes();
                    break;
                case 2:
                    if(message.attributes == null)
                        message.attributes = new ArrayList<BytesBytesPair>();
                    message.attributes.add(input.mergeObject(null, BytesBytesPair.getSchema()));
                    break;

                case 3:
                    if(message.configuration == null)
                        message.configuration = new ArrayList<NameStringPair>();
                    message.configuration.add(input.mergeObject(null, NameStringPair.getSchema()));
                    break;

                default:
                    input.handleUnknownField(number, this);
            }
        }
        } finally {
        if (message.attributes != null)
            message.attributes = java.util.Collections.unmodifiableList(message.attributes);
        else
            message.attributes = java.util.Collections.emptyList();
        if (message.configuration != null)
            message.configuration = java.util.Collections.unmodifiableList(message.configuration);
        else
            message.configuration = java.util.Collections.emptyList();
        }
    }


    public void writeTo(Output output, ColumnFamilySchema message) throws IOException
    {
        if(message.name == null)
            throw new UninitializedMessageException(message);
        output.writeBytes(1, message.name, false);

        if(message.attributes != null)
        {
            for(BytesBytesPair attributes : message.attributes)
            {
                if(attributes != null)
                    output.writeObject(2, attributes, BytesBytesPair.getSchema(), true);
            }
        }


        if(message.configuration != null)
        {
            for(NameStringPair configuration : message.configuration)
            {
                if(configuration != null)
                    output.writeObject(3, configuration, NameStringPair.getSchema(), true);
            }
        }

    }

    public String getFieldName(int number)
    {
        switch(number)
        {
            case 1: return "name";
            case 2: return "attributes";
            case 3: return "configuration";
            default: return null;
        }
    }

    public int getFieldNumber(String name)
    {
        final Integer number = __fieldMap.get(name);
        return number == null ? 0 : number.intValue();
    }

    private static final java.util.HashMap<String,Integer> __fieldMap = new java.util.HashMap<String,Integer>();
    static
    {
        __fieldMap.put("name", 1);
        __fieldMap.put("attributes", 2);
        __fieldMap.put("configuration", 3);
    }

}
