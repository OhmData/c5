// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from resources

package c5db.client.generated;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.ByteString;import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public final class TableName implements Externalizable, Message<TableName>, Schema<TableName>
{

    public static Schema<TableName> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static TableName getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final TableName DEFAULT_INSTANCE = new TableName();


    private ByteString namespace;
    private ByteString qualifier;

    public TableName()
    {

    }

    public TableName(
        ByteString namespace,
        ByteString qualifier
    )
    {
        this.namespace = namespace;
        this.qualifier = qualifier;
    }

    @Override
    public String toString() {
        return "TableName{" +
                    "namespace=" + namespace +
                    ", qualifier=" + qualifier +
                '}';
    }
    // getters and setters

    // namespace

    public ByteString getNamespace()
    {
        return namespace;
    }


    public TableName setNamespace(ByteString namespace)
    {
        this.namespace = namespace;
        return this;
    }

    // qualifier

    public ByteString getQualifier()
    {
        return qualifier;
    }


    public TableName setQualifier(ByteString qualifier)
    {
        this.qualifier = qualifier;
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<TableName> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public TableName newMessage()
    {
        return new TableName();
    }

    public Class<TableName> typeClass()
    {
        return TableName.class;
    }

    public String messageName()
    {
        return TableName.class.getSimpleName();
    }

    public String messageFullName()
    {
        return TableName.class.getName();
    }

    public boolean isInitialized(TableName message)
    {
        return
            message.namespace != null 
            && message.qualifier != null;
    }

    public void mergeFrom(Input input, TableName message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.namespace = input.readBytes();
                    break;
                case 2:
                    message.qualifier = input.readBytes();
                    break;
                default:
                    input.handleUnknownField(number, this);
            }
        }
    }


    public void writeTo(Output output, TableName message) throws IOException
    {
        if(message.namespace == null)
            throw new UninitializedMessageException(message);
        output.writeBytes(1, message.namespace, false);

        if(message.qualifier == null)
            throw new UninitializedMessageException(message);
        output.writeBytes(2, message.qualifier, false);
    }

    public String getFieldName(int number)
    {
        switch(number)
        {
            case 1: return "namespace";
            case 2: return "qualifier";
            default: return null;
        }
    }

    public int getFieldNumber(String name)
    {
        final Integer number = __fieldMap.get(name);
        return number == null ? 0 : number.intValue();
    }

    private static final java.util.HashMap<String,Integer> __fieldMap = new java.util.HashMap<String,Integer>();
    static
    {
        __fieldMap.put("namespace", 1);
        __fieldMap.put("qualifier", 2);
    }

}
