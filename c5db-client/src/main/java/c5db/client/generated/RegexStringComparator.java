// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from resources

package c5db.client.generated;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public final class RegexStringComparator implements Externalizable, Message<RegexStringComparator>, Schema<RegexStringComparator>
{

    public static Schema<RegexStringComparator> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static RegexStringComparator getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final RegexStringComparator DEFAULT_INSTANCE = new RegexStringComparator();


    private String pattern;
    private Integer patternFlags;
    private String charset;

    public RegexStringComparator()
    {

    }

    public RegexStringComparator(
        String pattern,
        Integer patternFlags,
        String charset
    )
    {
        this.pattern = pattern;
        this.patternFlags = patternFlags;
        this.charset = charset;
    }

    @Override
    public String toString() {
        return "RegexStringComparator{" +
                    "pattern=" + pattern +
                    ", patternFlags=" + patternFlags +
                    ", charset=" + charset +
                '}';
    }
    // getters and setters

    // pattern

    public String getPattern()
    {
        return pattern;
    }


    public RegexStringComparator setPattern(String pattern)
    {
        this.pattern = pattern;
        return this;
    }

    // patternFlags

    public Integer getPatternFlags()
    {
        return patternFlags;
    }


    public RegexStringComparator setPatternFlags(Integer patternFlags)
    {
        this.patternFlags = patternFlags;
        return this;
    }

    // charset

    public String getCharset()
    {
        return charset;
    }


    public RegexStringComparator setCharset(String charset)
    {
        this.charset = charset;
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<RegexStringComparator> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public RegexStringComparator newMessage()
    {
        return new RegexStringComparator();
    }

    public Class<RegexStringComparator> typeClass()
    {
        return RegexStringComparator.class;
    }

    public String messageName()
    {
        return RegexStringComparator.class.getSimpleName();
    }

    public String messageFullName()
    {
        return RegexStringComparator.class.getName();
    }

    public boolean isInitialized(RegexStringComparator message)
    {
        return
            message.pattern != null 
            && message.patternFlags != null 
            && message.charset != null;
    }

    public void mergeFrom(Input input, RegexStringComparator message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.pattern = input.readString();
                    break;
                case 2:
                    message.patternFlags = input.readInt32();
                    break;
                case 3:
                    message.charset = input.readString();
                    break;
                default:
                    input.handleUnknownField(number, this);
            }
        }
    }


    public void writeTo(Output output, RegexStringComparator message) throws IOException
    {
        if(message.pattern == null)
            throw new UninitializedMessageException(message);
        output.writeString(1, message.pattern, false);

        if(message.patternFlags == null)
            throw new UninitializedMessageException(message);
        output.writeInt32(2, message.patternFlags, false);

        if(message.charset == null)
            throw new UninitializedMessageException(message);
        output.writeString(3, message.charset, false);
    }

    public String getFieldName(int number)
    {
        switch(number)
        {
            case 1: return "pattern";
            case 2: return "patternFlags";
            case 3: return "charset";
            default: return null;
        }
    }

    public int getFieldNumber(String name)
    {
        final Integer number = __fieldMap.get(name);
        return number == null ? 0 : number.intValue();
    }

    private static final java.util.HashMap<String,Integer> __fieldMap = new java.util.HashMap<String,Integer>();
    static
    {
        __fieldMap.put("pattern", 1);
        __fieldMap.put("patternFlags", 2);
        __fieldMap.put("charset", 3);
    }

}
