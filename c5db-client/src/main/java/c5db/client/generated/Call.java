// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from resources

package c5db.client.generated;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public final class Call implements Externalizable, Message<Call>, Schema<Call>
{
    public enum Command implements com.dyuproject.protostuff.EnumLite<Command>
    {
        GET(0),
        MUTATE(1),
        SCAN(2),
        MULTI(3);

        public final int number;

        private Command (int number)
        {
            this.number = number;
        }

        public int getNumber()
        {
            return number;
        }

        public static Command valueOf(int number)
        {
            switch(number)
            {
                case 0: return GET;
                case 1: return MUTATE;
                case 2: return SCAN;
                case 3: return MULTI;
                default: return null;
            }
        }
    }


    public static Schema<Call> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static Call getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final Call DEFAULT_INSTANCE = new Call();


    private Command command;
    private Long commandId;
    private GetRequest get;
    private MutateRequest mutate;
    private ScanRequest scan;
    private MultiRequest multi;

    public Call()
    {

    }

    public Call(
        Command command,
        Long commandId
    )
    {
        this.command = command;
        this.commandId = commandId;
    }

    @Override
    public String toString() {
        return "Call{" +
                    "command=" + command +
                    ", commandId=" + commandId +
                    ", get=" + get +
                    ", mutate=" + mutate +
                    ", scan=" + scan +
                    ", multi=" + multi +
                '}';
    }
    // getters and setters

    // command

    public Command getCommand()
    {
        return command;
    }


    public Call setCommand(Command command)
    {
        this.command = command;
        return this;
    }

    // commandId

    public Long getCommandId()
    {
        return commandId;
    }


    public Call setCommandId(Long commandId)
    {
        this.commandId = commandId;
        return this;
    }

    // get

    public GetRequest getGet()
    {
        return get;
    }


    public Call setGet(GetRequest get)
    {
        this.get = get;
        return this;
    }

    // mutate

    public MutateRequest getMutate()
    {
        return mutate;
    }


    public Call setMutate(MutateRequest mutate)
    {
        this.mutate = mutate;
        return this;
    }

    // scan

    public ScanRequest getScan()
    {
        return scan;
    }


    public Call setScan(ScanRequest scan)
    {
        this.scan = scan;
        return this;
    }

    // multi

    public MultiRequest getMulti()
    {
        return multi;
    }


    public Call setMulti(MultiRequest multi)
    {
        this.multi = multi;
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<Call> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public Call newMessage()
    {
        return new Call();
    }

    public Class<Call> typeClass()
    {
        return Call.class;
    }

    public String messageName()
    {
        return Call.class.getSimpleName();
    }

    public String messageFullName()
    {
        return Call.class.getName();
    }

    public boolean isInitialized(Call message)
    {
        return
            message.command != null 
            && message.commandId != null;
    }

    public void mergeFrom(Input input, Call message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.command = Command.valueOf(input.readEnum());
                    break;

                case 2:
                    message.commandId = input.readInt64();
                    break;
                case 3:
                    message.get = input.mergeObject(message.get, GetRequest.getSchema());
                    break;

                case 4:
                    message.mutate = input.mergeObject(message.mutate, MutateRequest.getSchema());
                    break;

                case 5:
                    message.scan = input.mergeObject(message.scan, ScanRequest.getSchema());
                    break;

                case 6:
                    message.multi = input.mergeObject(message.multi, MultiRequest.getSchema());
                    break;

                default:
                    input.handleUnknownField(number, this);
            }
        }
    }


    public void writeTo(Output output, Call message) throws IOException
    {
        if(message.command == null)
            throw new UninitializedMessageException(message);
        output.writeEnum(1, message.command.number, false);

        if(message.commandId == null)
            throw new UninitializedMessageException(message);
        output.writeInt64(2, message.commandId, false);

        if(message.get != null)
             output.writeObject(3, message.get, GetRequest.getSchema(), false);


        if(message.mutate != null)
             output.writeObject(4, message.mutate, MutateRequest.getSchema(), false);


        if(message.scan != null)
             output.writeObject(5, message.scan, ScanRequest.getSchema(), false);


        if(message.multi != null)
             output.writeObject(6, message.multi, MultiRequest.getSchema(), false);

    }

    public String getFieldName(int number)
    {
        switch(number)
        {
            case 1: return "command";
            case 2: return "commandId";
            case 3: return "get";
            case 4: return "mutate";
            case 5: return "scan";
            case 6: return "multi";
            default: return null;
        }
    }

    public int getFieldNumber(String name)
    {
        final Integer number = __fieldMap.get(name);
        return number == null ? 0 : number.intValue();
    }

    private static final java.util.HashMap<String,Integer> __fieldMap = new java.util.HashMap<String,Integer>();
    static
    {
        __fieldMap.put("command", 1);
        __fieldMap.put("commandId", 2);
        __fieldMap.put("get", 3);
        __fieldMap.put("mutate", 4);
        __fieldMap.put("scan", 5);
        __fieldMap.put("multi", 6);
    }

}
