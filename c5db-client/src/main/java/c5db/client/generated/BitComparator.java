// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from resources

package c5db.client.generated;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public final class BitComparator implements Externalizable, Message<BitComparator>, Schema<BitComparator>
{
    public enum BitwiseOp implements com.dyuproject.protostuff.EnumLite<BitwiseOp>
    {
        AND(1),
        OR(2),
        XOR(3);

        public final int number;

        private BitwiseOp (int number)
        {
            this.number = number;
        }

        public int getNumber()
        {
            return number;
        }

        public static BitwiseOp valueOf(int number)
        {
            switch(number)
            {
                case 1: return AND;
                case 2: return OR;
                case 3: return XOR;
                default: return null;
            }
        }
    }


    public static Schema<BitComparator> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static BitComparator getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final BitComparator DEFAULT_INSTANCE = new BitComparator();


    private ByteArrayComparable comparable;
    private BitwiseOp bitwiseOp;

    public BitComparator()
    {

    }

    public BitComparator(
        ByteArrayComparable comparable,
        BitwiseOp bitwiseOp
    )
    {
        this.comparable = comparable;
        this.bitwiseOp = bitwiseOp;
    }

    @Override
    public String toString() {
        return "BitComparator{" +
                    "comparable=" + comparable +
                    ", bitwiseOp=" + bitwiseOp +
                '}';
    }
    // getters and setters

    // comparable

    public ByteArrayComparable getComparable()
    {
        return comparable;
    }


    public BitComparator setComparable(ByteArrayComparable comparable)
    {
        this.comparable = comparable;
        return this;
    }

    // bitwiseOp

    public BitwiseOp getBitwiseOp()
    {
        return bitwiseOp;
    }


    public BitComparator setBitwiseOp(BitwiseOp bitwiseOp)
    {
        this.bitwiseOp = bitwiseOp;
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<BitComparator> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public BitComparator newMessage()
    {
        return new BitComparator();
    }

    public Class<BitComparator> typeClass()
    {
        return BitComparator.class;
    }

    public String messageName()
    {
        return BitComparator.class.getSimpleName();
    }

    public String messageFullName()
    {
        return BitComparator.class.getName();
    }

    public boolean isInitialized(BitComparator message)
    {
        return
            message.comparable != null 
            && message.bitwiseOp != null;
    }

    public void mergeFrom(Input input, BitComparator message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.comparable = input.mergeObject(message.comparable, ByteArrayComparable.getSchema());
                    break;

                case 2:
                    message.bitwiseOp = BitwiseOp.valueOf(input.readEnum());
                    break;

                default:
                    input.handleUnknownField(number, this);
            }
        }
    }


    public void writeTo(Output output, BitComparator message) throws IOException
    {
        if(message.comparable == null)
            throw new UninitializedMessageException(message);
        output.writeObject(1, message.comparable, ByteArrayComparable.getSchema(), false);


        if(message.bitwiseOp == null)
            throw new UninitializedMessageException(message);
        output.writeEnum(2, message.bitwiseOp.number, false);
    }

    public String getFieldName(int number)
    {
        switch(number)
        {
            case 1: return "comparable";
            case 2: return "bitwiseOp";
            default: return null;
        }
    }

    public int getFieldNumber(String name)
    {
        final Integer number = __fieldMap.get(name);
        return number == null ? 0 : number.intValue();
    }

    private static final java.util.HashMap<String,Integer> __fieldMap = new java.util.HashMap<String,Integer>();
    static
    {
        __fieldMap.put("comparable", 1);
        __fieldMap.put("bitwiseOp", 2);
    }

}
