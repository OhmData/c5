From fd9a7673f1e707068fc0793cb7851cfc0463e4eb Mon Sep 17 00:00:00 2001
From: Elliott Neil Clark <eclark@apache.org>
Date: Wed, 27 Nov 2013 00:57:13 +0000
Subject: [PATCH 18/35] HBASE-10039 Fix potential Resource Leak in RpcServer

git-svn-id: https://svn.apache.org/repos/asf/hbase/branches/0.96@1545895 13f79535-47bb-0310-9956-ffa450edef68
---
 .../org/apache/hadoop/hbase/ipc/RpcServer.java     | 48 ++++++++++++++--------
 1 file changed, 32 insertions(+), 16 deletions(-)

diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/ipc/RpcServer.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/ipc/RpcServer.java
index 7b9070d..a7f3e34 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/ipc/RpcServer.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/ipc/RpcServer.java
@@ -743,9 +743,14 @@ public class RpcServer implements RpcServerInterface {
 
       SocketChannel channel;
       while ((channel = server.accept()) != null) {
-        channel.configureBlocking(false);
-        channel.socket().setTcpNoDelay(tcpNoDelay);
-        channel.socket().setKeepAlive(tcpKeepAlive);
+        try {
+          channel.configureBlocking(false);
+          channel.socket().setTcpNoDelay(tcpNoDelay);
+          channel.socket().setKeepAlive(tcpKeepAlive);
+        } catch (IOException ioe) {
+          channel.close();
+          throw ioe;
+        }
 
         Reader reader = getReader();
         try {
@@ -1368,20 +1373,31 @@ public class RpcServer implements RpcServerInterface {
      */
     private void doRawSaslReply(SaslStatus status, Writable rv,
         String errorClass, String error) throws IOException {
-      //In my testing, have noticed that sasl messages are usually
-      //in the ballpark of 100-200. That's why the initialcapacity is 256.
-      ByteBufferOutputStream saslResponse = new ByteBufferOutputStream(256);
-      DataOutputStream out = new DataOutputStream(saslResponse);
-      out.writeInt(status.state); // write status
-      if (status == SaslStatus.SUCCESS) {
-        rv.write(out);
-      } else {
-        WritableUtils.writeString(out, errorClass);
-        WritableUtils.writeString(out, error);
+      ByteBufferOutputStream saslResponse = null;
+      DataOutputStream out = null;
+      try {
+        // In my testing, have noticed that sasl messages are usually
+        // in the ballpark of 100-200. That's why the initial capacity is 256.
+        saslResponse = new ByteBufferOutputStream(256);
+        out = new DataOutputStream(saslResponse);
+        out.writeInt(status.state); // write status
+        if (status == SaslStatus.SUCCESS) {
+          rv.write(out);
+        } else {
+          WritableUtils.writeString(out, errorClass);
+          WritableUtils.writeString(out, error);
+        }
+        saslCall.setSaslTokenResponse(saslResponse.getByteBuffer());
+        saslCall.responder = responder;
+        saslCall.sendResponseIfReady();
+      } finally {
+        if (saslResponse != null) {
+          saslResponse.close();
+        }
+        if (out != null) {
+          out.close();
+        }
       }
-      saslCall.setSaslTokenResponse(saslResponse.getByteBuffer());
-      saslCall.responder = responder;
-      saslCall.sendResponseIfReady();
     }
 
     private void disposeSasl() {
-- 
1.8.3.4 (Apple Git-47)

