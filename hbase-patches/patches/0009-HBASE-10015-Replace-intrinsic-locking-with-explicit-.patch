From dea48a5c6ecaf6e7e46afa875d0b05a85fc43c51 Mon Sep 17 00:00:00 2001
From: Lars Hofhansl <larsh@apache.org>
Date: Tue, 26 Nov 2013 21:06:43 +0000
Subject: [PATCH 09/35] HBASE-10015 Replace intrinsic locking with explicit
 locks in StoreScanner

git-svn-id: https://svn.apache.org/repos/asf/hbase/branches/0.96@1545837 13f79535-47bb-0310-9956-ffa450edef68
---
 .../hadoop/hbase/regionserver/StoreScanner.java    | 46 ++++++++++++++++++----
 1 file changed, 39 insertions(+), 7 deletions(-)

diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StoreScanner.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StoreScanner.java
index eb76eaf..657758d 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StoreScanner.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StoreScanner.java
@@ -25,6 +25,7 @@ import java.util.ArrayList;
 import java.util.List;
 import java.util.NavigableSet;
 import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.locks.ReentrantLock;
 
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
@@ -95,6 +96,7 @@ public class StoreScanner extends NonLazyKeyValueScanner
 
   // A flag whether use pread for scan
   private boolean scanUsePread = false;
+  private ReentrantLock lock = new ReentrantLock();
 
   /** An internal constructor. */
   protected StoreScanner(Store store, boolean cacheBlocks, Scan scan,
@@ -325,11 +327,16 @@ public class StoreScanner extends NonLazyKeyValueScanner
   }
 
   @Override
-  public synchronized KeyValue peek() {
+  public KeyValue peek() {
+    lock.lock();
+    try {
     if (this.heap == null) {
       return this.lastTop;
     }
     return this.heap.peek();
+    } finally {
+      lock.unlock();
+    }
   }
 
   @Override
@@ -339,7 +346,9 @@ public class StoreScanner extends NonLazyKeyValueScanner
   }
 
   @Override
-  public synchronized void close() {
+  public void close() {
+    lock.lock();
+    try {
     if (this.closing) return;
     this.closing = true;
     // under test, we dont have a this.store
@@ -349,13 +358,21 @@ public class StoreScanner extends NonLazyKeyValueScanner
       this.heap.close();
     this.heap = null; // CLOSED!
     this.lastTop = null; // If both are null, we are closed.
+    } finally {
+      lock.unlock();
+    }
   }
 
   @Override
-  public synchronized boolean seek(KeyValue key) throws IOException {
+  public boolean seek(KeyValue key) throws IOException {
+    lock.lock();
+    try {
     // reset matcher state, in case that underlying store changed
     checkReseek();
     return this.heap.seek(key);
+    } finally {
+      lock.unlock();
+    }
   }
 
   /**
@@ -365,7 +382,9 @@ public class StoreScanner extends NonLazyKeyValueScanner
    * @return true if there are more rows, false if scanner is done
    */
   @Override
-  public synchronized boolean next(List<Cell> outResult, int limit) throws IOException {
+  public boolean next(List<Cell> outResult, int limit) throws IOException {
+    lock.lock();
+    try {
     if (checkReseek()) {
       return true;
     }
@@ -502,16 +521,21 @@ public class StoreScanner extends NonLazyKeyValueScanner
     // No more keys
     close();
     return false;
+    } finally {
+      lock.unlock();
+    }
   }
 
   @Override
-  public synchronized boolean next(List<Cell> outResult) throws IOException {
+  public boolean next(List<Cell> outResult) throws IOException {
     return next(outResult, -1);
   }
 
   // Implementation of ChangedReadersObserver
   @Override
-  public synchronized void updateReaders() throws IOException {
+  public void updateReaders() throws IOException {
+    lock.lock();
+    try {
     if (this.closing) return;
 
     // All public synchronized API calls will call 'checkReseek' which will cause
@@ -531,6 +555,9 @@ public class StoreScanner extends NonLazyKeyValueScanner
     this.heap = null; // the re-seeks could be slow (access HDFS) free up memory ASAP
 
     // Let the next() call handle re-creating and seeking
+    } finally {
+      lock.unlock();
+    }
   }
 
   /**
@@ -594,7 +621,9 @@ public class StoreScanner extends NonLazyKeyValueScanner
   }
 
   @Override
-  public synchronized boolean reseek(KeyValue kv) throws IOException {
+  public boolean reseek(KeyValue kv) throws IOException {
+    lock.lock();
+    try {
     //Heap will not be null, if this is called from next() which.
     //If called from RegionScanner.reseek(...) make sure the scanner
     //stack is reset if needed.
@@ -603,6 +632,9 @@ public class StoreScanner extends NonLazyKeyValueScanner
       return heap.requestSeek(kv, true, useRowColBloom);
     }
     return heap.reseek(kv);
+    } finally {
+      lock.unlock();
+    }
   }
 
   @Override
-- 
1.8.3.4 (Apple Git-47)

